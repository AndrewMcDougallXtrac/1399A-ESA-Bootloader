
1399A-ESA-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bbc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .codeInformation 00000080  08003f70  08003f70  00023f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .codePresent  00000004  08003ff8  08003ff8  00023ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .flashChecksum 00000004  08003ffc  08003ffc  00023ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata       00000040  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08003d88  08003d88  00024000  2**0
                  CONTENTS
  7 .ARM          00000000  08003d88  08003d88  00024000  2**0
                  CONTENTS
  8 .preinit_array 00000000  08003d88  08003d88  00024000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000005c  20000000  08003d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000014c  20000060  08003dec  00020060  2**3
                  ALLOC
 13 ._user_heap_stack 00000604  200001ac  08003dec  000201ac  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00024000  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY
 16 .debug_info   0000ddf6  00000000  00000000  00024073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00002a7d  00000000  00000000  00031e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000f08  00000000  00000000  000348e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b61  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00022cc3  00000000  00000000  00036351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00011f98  00000000  00000000  00059014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d1115  00000000  00000000  0006afac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00003ce0  00000000  00000000  0013c0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000075  00000000  00000000  0013fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000060 	.word	0x20000060
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003d30 	.word	0x08003d30

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000064 	.word	0x20000064
 80001c8:	08003d30 	.word	0x08003d30

080001cc <CAN_Init_Diag_Messages>:
uint32_t 	*pMemory; //pointer to indirect read memory

uint8_t		DiagReplyData[8] = {0,0,0,0,0,0,0,0};
uint8_t		DiagRequestData[8] = {0,0,0,0,0,0,0,0};

void CAN_Init_Diag_Messages(CAN_HandleTypeDef *hcan) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	  CanHeader1.StdId = CAN_MSG_ID_DIAG_REPLY;
 80001d4:	4b24      	ldr	r3, [pc, #144]	; (8000268 <CAN_Init_Diag_Messages+0x9c>)
 80001d6:	2256      	movs	r2, #86	; 0x56
 80001d8:	601a      	str	r2, [r3, #0]
	  CanHeader1.ExtId = 0x01u;
 80001da:	4b23      	ldr	r3, [pc, #140]	; (8000268 <CAN_Init_Diag_Messages+0x9c>)
 80001dc:	2201      	movs	r2, #1
 80001de:	605a      	str	r2, [r3, #4]
	  CanHeader1.DLC = 8;
 80001e0:	4b21      	ldr	r3, [pc, #132]	; (8000268 <CAN_Init_Diag_Messages+0x9c>)
 80001e2:	2208      	movs	r2, #8
 80001e4:	611a      	str	r2, [r3, #16]
	  CanHeader1.IDE = CAN_ID_STD; //data field type 'Can_identifier_Type'
 80001e6:	4b20      	ldr	r3, [pc, #128]	; (8000268 <CAN_Init_Diag_Messages+0x9c>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	609a      	str	r2, [r3, #8]
	  CanHeader1.RTR = CAN_RTR_DATA; //data of type 'CAN_remote_transmission_request'
 80001ec:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <CAN_Init_Diag_Messages+0x9c>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	60da      	str	r2, [r3, #12]

	  pCanHeader = &CanHeader1;
 80001f2:	4b1e      	ldr	r3, [pc, #120]	; (800026c <CAN_Init_Diag_Messages+0xa0>)
 80001f4:	4a1c      	ldr	r2, [pc, #112]	; (8000268 <CAN_Init_Diag_Messages+0x9c>)
 80001f6:	601a      	str	r2, [r3, #0]

	  //Prepare for CAN reception
	  //Configure CAN FIFO 0, filter 0 & 1.
	  //CAN_FilterTypeDef CanFilterConfig
	  CanFilterConfig.FilterIdHigh = 0; //set message identifier to look for, was 0x321<<5
 80001f8:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	  CanFilterConfig.FilterIdLow = 0;  //was 0x321<<5
 80001fe:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 8000200:	2200      	movs	r2, #0
 8000202:	605a      	str	r2, [r3, #4]

	  //mask identifier - default type of filter is a list NOT mask
	  CanFilterConfig.FilterMaskIdHigh = CAN_MSG_ID_DIAG_REQUEST<<5; //set message identifier to look for, was 0x321<<5;
 8000204:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 8000206:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 800020a:	609a      	str	r2, [r3, #8]
	  CanFilterConfig.FilterMaskIdLow = CAN_MSG_ID_DIAG_REQUEST<<5;  //was 0x321<<5;
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 800020e:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 8000212:	60da      	str	r2, [r3, #12]

	  CanFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //variable type: CAN_filter_FIFO (FIFO 0)
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 8000216:	2200      	movs	r2, #0
 8000218:	611a      	str	r2, [r3, #16]
	  CanFilterConfig.FilterBank = 0;//specifies which filter bank will be initialised
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 800021c:	2200      	movs	r2, #0
 800021e:	615a      	str	r2, [r3, #20]
	  CanFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST; //variable type: CAN_filter_modeTjis controls bit FBMx=1
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 8000222:	2201      	movs	r2, #1
 8000224:	619a      	str	r2, [r3, #24]
	  CanFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; //variable type: CAN_filter_scale (2off 16bit filters) This controls bit FSCx=0
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 8000228:	2200      	movs	r2, #0
 800022a:	61da      	str	r2, [r3, #28]
	  CanFilterConfig.FilterActivation = CAN_FILTER_ENABLE; //variable of type: CAN_filter_activation
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 800022e:	2201      	movs	r2, #1
 8000230:	621a      	str	r2, [r3, #32]
	  PtrCanFilterConfig = &CanFilterConfig; //set pointer to point to variable
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <CAN_Init_Diag_Messages+0xa8>)
 8000234:	4a0e      	ldr	r2, [pc, #56]	; (8000270 <CAN_Init_Diag_Messages+0xa4>)
 8000236:	601a      	str	r2, [r3, #0]

	  HAL_CAN_ConfigFilter(hcan, PtrCanFilterConfig); //Configure the CAN reception filters (HAL CAN configuration function)
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <CAN_Init_Diag_Messages+0xa8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4619      	mov	r1, r3
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f001 fb19 	bl	8001876 <HAL_CAN_ConfigFilter>


	  HAL_GPIO_WritePin(CAN_RS_GPIO_Port, CAN_RS_Pin, GPIO_PIN_RESET); //Enable CAN transceiver
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <CAN_Init_Diag_Messages+0xac>)
 800024a:	f002 fd5d 	bl	8002d08 <HAL_GPIO_WritePin>

	  //CanTxMailbox = CAN_TX_MAILBOX0;
	  CanTxMailbox = 0;
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <CAN_Init_Diag_Messages+0xb0>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
	  pCanTxMailbox = &CanTxMailbox;
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <CAN_Init_Diag_Messages+0xb4>)
 8000256:	4a09      	ldr	r2, [pc, #36]	; (800027c <CAN_Init_Diag_Messages+0xb0>)
 8000258:	601a      	str	r2, [r3, #0]

	  //Enable CAN RX Fifo 0 interrupts
	  // uses polling mode instead
	  // HAL_CAN_ActivateNotification (&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

	  HAL_CAN_Start(hcan);
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f001 fbd5 	bl	8001a0a <HAL_CAN_Start>

}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000088 	.word	0x20000088
 800026c:	200000a0 	.word	0x200000a0
 8000270:	200000d0 	.word	0x200000d0
 8000274:	200000f8 	.word	0x200000f8
 8000278:	48000400 	.word	0x48000400
 800027c:	20000080 	.word	0x20000080
 8000280:	20000084 	.word	0x20000084

08000284 <CAN_RxCheckMsgPendingCallback>:


void CAN_RxCheckMsgPendingCallback (CAN_HandleTypeDef *hcan)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	//CAN handler to see if new data received
	//Function called by polling ~1ms
	uint8_t CanRx0FillLevel;

	if (hcan->Instance == CAN1)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1c      	ldr	r2, [pc, #112]	; (8000304 <CAN_RxCheckMsgPendingCallback+0x80>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d132      	bne.n	80002fc <CAN_RxCheckMsgPendingCallback+0x78>
	{
		CanRx0FillLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0);
 8000296:	2100      	movs	r1, #0
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f001 fe21 	bl	8001ee0 <HAL_CAN_GetRxFifoFillLevel>
 800029e:	4603      	mov	r3, r0
 80002a0:	73fb      	strb	r3, [r7, #15]

		if (CanRx0FillLevel != 0) //test to ensure there is something in the CAN receive FIFO 0 buffer
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d026      	beq.n	80002f6 <CAN_RxCheckMsgPendingCallback+0x72>
		{

			pRecHeader = &RecHeader;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <CAN_RxCheckMsgPendingCallback+0x84>)
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <CAN_RxCheckMsgPendingCallback+0x88>)
 80002ac:	601a      	str	r2, [r3, #0]
			pRecData = RecData;  //don't need to add the ampersand!!!
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <CAN_RxCheckMsgPendingCallback+0x8c>)
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <CAN_RxCheckMsgPendingCallback+0x90>)
 80002b2:	601a      	str	r2, [r3, #0]
			if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, pRecHeader, pRecData) == HAL_OK)
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <CAN_RxCheckMsgPendingCallback+0x84>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <CAN_RxCheckMsgPendingCallback+0x8c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2100      	movs	r1, #0
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f001 fcec 	bl	8001c9c <HAL_CAN_GetRxMessage>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d115      	bne.n	80002f6 <CAN_RxCheckMsgPendingCallback+0x72>
			{
				CanRxCount++;
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <CAN_RxCheckMsgPendingCallback+0x94>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <CAN_RxCheckMsgPendingCallback+0x94>)
 80002d4:	701a      	strb	r2, [r3, #0]
				if (pRecHeader->IDE == CAN_ID_STD)
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <CAN_RxCheckMsgPendingCallback+0x84>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d10a      	bne.n	80002f6 <CAN_RxCheckMsgPendingCallback+0x72>
				{
					// Standard CAN identifier received
					// Test current received message
					if (pRecHeader->StdId == CAN_MSG_ID_DIAG_REQUEST)
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <CAN_RxCheckMsgPendingCallback+0x84>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b55      	cmp	r3, #85	; 0x55
 80002e8:	d105      	bne.n	80002f6 <CAN_RxCheckMsgPendingCallback+0x72>
					{
						// Diagnostic mailbox message
						Request_Green_Led_State(LED_GREEN_STATE_ON);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f000 fbb0 	bl	8000a50 <Request_Green_Led_State>
						CAN_Diag_Decode_Request(&RecData[0]);
 80002f0:	4808      	ldr	r0, [pc, #32]	; (8000314 <CAN_RxCheckMsgPendingCallback+0x90>)
 80002f2:	f000 f813 	bl	800031c <CAN_Diag_Decode_Request>
					}
				}
			}
		}
		CAN_Diag_Generate_Reply(hcan); //send a reply if needed or continue reply
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 f848 	bl	800038c <CAN_Diag_Generate_Reply>
	}
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40006400 	.word	0x40006400
 8000308:	200000cc 	.word	0x200000cc
 800030c:	200000b0 	.word	0x200000b0
 8000310:	200000ac 	.word	0x200000ac
 8000314:	200000a4 	.word	0x200000a4
 8000318:	2000007c 	.word	0x2000007c

0800031c <CAN_Diag_Decode_Request>:
		retVal = 0;
	}
	return(retVal);
}

void CAN_Diag_Decode_Request(uint8_t* dataBuff) {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	DiagRequestData[0] = dataBuff[0];
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781a      	ldrb	r2, [r3, #0]
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 800032a:	701a      	strb	r2, [r3, #0]
	DiagRequestData[1] = dataBuff[1];
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	785a      	ldrb	r2, [r3, #1]
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 8000332:	705a      	strb	r2, [r3, #1]
	DiagRequestData[2] = dataBuff[2];
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	789a      	ldrb	r2, [r3, #2]
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 800033a:	709a      	strb	r2, [r3, #2]
	DiagRequestData[3] = dataBuff[3];
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	78da      	ldrb	r2, [r3, #3]
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 8000342:	70da      	strb	r2, [r3, #3]
	DiagRequestData[4] = dataBuff[4];
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791a      	ldrb	r2, [r3, #4]
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 800034a:	711a      	strb	r2, [r3, #4]
	DiagRequestData[5] = dataBuff[5];
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	795a      	ldrb	r2, [r3, #5]
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 8000352:	715a      	strb	r2, [r3, #5]
	DiagRequestData[6] = dataBuff[6];
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	799a      	ldrb	r2, [r3, #6]
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 800035a:	719a      	strb	r2, [r3, #6]
	DiagRequestData[7] = dataBuff[7];
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	79da      	ldrb	r2, [r3, #7]
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 8000362:	71da      	strb	r2, [r3, #7]
	DiagTesterNodeId = DiagRequestData[0];
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <CAN_Diag_Decode_Request+0x68>)
 800036a:	701a      	strb	r2, [r3, #0]
	DiagCommand = DiagRequestData[1];
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <CAN_Diag_Decode_Request+0x64>)
 800036e:	785a      	ldrb	r2, [r3, #1]
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <CAN_Diag_Decode_Request+0x6c>)
 8000372:	701a      	strb	r2, [r3, #0]

}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	2000011c 	.word	0x2000011c
 8000384:	20000115 	.word	0x20000115
 8000388:	20000114 	.word	0x20000114

0800038c <CAN_Diag_Generate_Reply>:

void CAN_Diag_Generate_Reply(CAN_HandleTypeDef *hcan) {
 800038c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]

	uint8_t sector;
	uint8_t txDataBuff[8];
	convert_4u8_to_1u32_t tempData;

	switch(DiagCommand) {
 8000396:	4ba0      	ldr	r3, [pc, #640]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2bc3      	cmp	r3, #195	; 0xc3
 800039c:	f300 8251 	bgt.w	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 80003a0:	2baa      	cmp	r3, #170	; 0xaa
 80003a2:	da18      	bge.n	80003d6 <CAN_Diag_Generate_Reply+0x4a>
 80003a4:	2b83      	cmp	r3, #131	; 0x83
 80003a6:	f000 8141 	beq.w	800062c <CAN_Diag_Generate_Reply+0x2a0>
 80003aa:	2b83      	cmp	r3, #131	; 0x83
 80003ac:	f300 8249 	bgt.w	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 80003b0:	2b42      	cmp	r3, #66	; 0x42
 80003b2:	f000 81c3 	beq.w	800073c <CAN_Diag_Generate_Reply+0x3b0>
 80003b6:	2b42      	cmp	r3, #66	; 0x42
 80003b8:	f300 8243 	bgt.w	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 80003bc:	2b41      	cmp	r3, #65	; 0x41
 80003be:	f000 8185 	beq.w	80006cc <CAN_Diag_Generate_Reply+0x340>
 80003c2:	2b41      	cmp	r3, #65	; 0x41
 80003c4:	f300 823d 	bgt.w	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 80003c8:	2b13      	cmp	r3, #19
 80003ca:	f000 80cf 	beq.w	800056c <CAN_Diag_Generate_Reply+0x1e0>
 80003ce:	2b40      	cmp	r3, #64	; 0x40
 80003d0:	f000 815b 	beq.w	800068a <CAN_Diag_Generate_Reply+0x2fe>
 80003d4:	e235      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 80003d6:	3baa      	subs	r3, #170	; 0xaa
 80003d8:	2b19      	cmp	r3, #25
 80003da:	f200 8232 	bhi.w	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 80003de:	a201      	add	r2, pc, #4	; (adr r2, 80003e4 <CAN_Diag_Generate_Reply+0x58>)
 80003e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e4:	080007eb 	.word	0x080007eb
 80003e8:	08000843 	.word	0x08000843
 80003ec:	08000843 	.word	0x08000843
 80003f0:	08000843 	.word	0x08000843
 80003f4:	08000843 	.word	0x08000843
 80003f8:	08000843 	.word	0x08000843
 80003fc:	08000843 	.word	0x08000843
 8000400:	08000843 	.word	0x08000843
 8000404:	08000843 	.word	0x08000843
 8000408:	08000843 	.word	0x08000843
 800040c:	08000843 	.word	0x08000843
 8000410:	08000843 	.word	0x08000843
 8000414:	08000843 	.word	0x08000843
 8000418:	08000843 	.word	0x08000843
 800041c:	08000843 	.word	0x08000843
 8000420:	08000843 	.word	0x08000843
 8000424:	08000843 	.word	0x08000843
 8000428:	08000843 	.word	0x08000843
 800042c:	08000843 	.word	0x08000843
 8000430:	08000843 	.word	0x08000843
 8000434:	08000843 	.word	0x08000843
 8000438:	08000843 	.word	0x08000843
 800043c:	0800044d 	.word	0x0800044d
 8000440:	080004a1 	.word	0x080004a1
 8000444:	080004f5 	.word	0x080004f5
 8000448:	0800052d 	.word	0x0800052d
	case DIAG_CMD_WRITE_CRC_START_ADDR:
		// decode the requested address
		tempData.bytes.byte_hh = DiagRequestData[2];
 800044c:	4b73      	ldr	r3, [pc, #460]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 800044e:	789b      	ldrb	r3, [r3, #2]
 8000450:	72fb      	strb	r3, [r7, #11]
		tempData.bytes.byte_hl = DiagRequestData[3];
 8000452:	4b72      	ldr	r3, [pc, #456]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 8000454:	78db      	ldrb	r3, [r3, #3]
 8000456:	72bb      	strb	r3, [r7, #10]
		tempData.bytes.byte_lh = DiagRequestData[4];
 8000458:	4b70      	ldr	r3, [pc, #448]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	727b      	strb	r3, [r7, #9]
		tempData.bytes.byte_ll = DiagRequestData[5];
 800045e:	4b6f      	ldr	r3, [pc, #444]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	723b      	strb	r3, [r7, #8]
		Set_CRC_Start_Address(tempData.word32);
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 ff1e 	bl	80012a8 <Set_CRC_Start_Address>
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 800046c:	239a      	movs	r3, #154	; 0x9a
 800046e:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 8000470:	4b69      	ldr	r3, [pc, #420]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	43db      	mvns	r3, r3
 8000476:	b2db      	uxtb	r3, r3
 8000478:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = tempData.bytes.byte_hh;
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = tempData.bytes.byte_hl;
 800047e:	7abb      	ldrb	r3, [r7, #10]
 8000480:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = tempData.bytes.byte_lh;
 8000482:	7a7b      	ldrb	r3, [r7, #9]
 8000484:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = tempData.bytes.byte_ll;
 8000486:	7a3b      	ldrb	r3, [r7, #8]
 8000488:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = 0x00;
 800048a:	2300      	movs	r3, #0
 800048c:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 8000492:	4b63      	ldr	r3, [pc, #396]	; (8000620 <CAN_Diag_Generate_Reply+0x294>)
 8000494:	2201      	movs	r2, #1
 8000496:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 8000498:	4b5f      	ldr	r3, [pc, #380]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
		break;
 800049e:	e1d0      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_WRITE_CRC_END_ADDR:
		// decode the requested address
		tempData.bytes.byte_hh = DiagRequestData[2];
 80004a0:	4b5e      	ldr	r3, [pc, #376]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	72fb      	strb	r3, [r7, #11]
		tempData.bytes.byte_hl = DiagRequestData[3];
 80004a6:	4b5d      	ldr	r3, [pc, #372]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 80004a8:	78db      	ldrb	r3, [r3, #3]
 80004aa:	72bb      	strb	r3, [r7, #10]
		tempData.bytes.byte_lh = DiagRequestData[4];
 80004ac:	4b5b      	ldr	r3, [pc, #364]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	727b      	strb	r3, [r7, #9]
		tempData.bytes.byte_ll = DiagRequestData[5];
 80004b2:	4b5a      	ldr	r3, [pc, #360]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	723b      	strb	r3, [r7, #8]
		Set_CRC_End_Address(tempData.word32);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 ff04 	bl	80012c8 <Set_CRC_End_Address>
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 80004c0:	239a      	movs	r3, #154	; 0x9a
 80004c2:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 80004c4:	4b54      	ldr	r3, [pc, #336]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	43db      	mvns	r3, r3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = tempData.bytes.byte_hh;
 80004ce:	7afb      	ldrb	r3, [r7, #11]
 80004d0:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = tempData.bytes.byte_hl;
 80004d2:	7abb      	ldrb	r3, [r7, #10]
 80004d4:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = tempData.bytes.byte_lh;
 80004d6:	7a7b      	ldrb	r3, [r7, #9]
 80004d8:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = tempData.bytes.byte_ll;
 80004da:	7a3b      	ldrb	r3, [r7, #8]
 80004dc:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 80004e6:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <CAN_Diag_Generate_Reply+0x294>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 80004ec:	4b4a      	ldr	r3, [pc, #296]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
		break;
 80004f2:	e1a6      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_WRITE_CRC_CALC_REQ:
		// decode the requested address
		Start_CRC_Calculation();
 80004f4:	f000 fef8 	bl	80012e8 <Start_CRC_Calculation>
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 80004f8:	239a      	movs	r3, #154	; 0x9a
 80004fa:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 80004fc:	4b46      	ldr	r3, [pc, #280]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	43db      	mvns	r3, r3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = 0xDE;
 8000506:	23de      	movs	r3, #222	; 0xde
 8000508:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = 0xAD;
 800050a:	23ad      	movs	r3, #173	; 0xad
 800050c:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = 0xBE;
 800050e:	23be      	movs	r3, #190	; 0xbe
 8000510:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = 0xEF;
 8000512:	23ef      	movs	r3, #239	; 0xef
 8000514:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <CAN_Diag_Generate_Reply+0x294>)
 8000520:	2201      	movs	r2, #1
 8000522:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 8000524:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
		break;
 800052a:	e18a      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_READ_CRC_RESULT:
		// decode the requested address
		tempData.word32 = Report_CRC_Result_Value();
 800052c:	f000 ff1a 	bl	8001364 <Report_CRC_Result_Value>
 8000530:	4603      	mov	r3, r0
 8000532:	60bb      	str	r3, [r7, #8]
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 8000534:	239a      	movs	r3, #154	; 0x9a
 8000536:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 8000538:	4b37      	ldr	r3, [pc, #220]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	43db      	mvns	r3, r3
 800053e:	b2db      	uxtb	r3, r3
 8000540:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = tempData.bytes.byte_hh;
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = tempData.bytes.byte_hl;
 8000546:	7abb      	ldrb	r3, [r7, #10]
 8000548:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = tempData.bytes.byte_lh;
 800054a:	7a7b      	ldrb	r3, [r7, #9]
 800054c:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = tempData.bytes.byte_ll;
 800054e:	7a3b      	ldrb	r3, [r7, #8]
 8000550:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = (uint8_t)Report_CRC_Progress();
 8000552:	f000 fef3 	bl	800133c <Report_CRC_Progress>
 8000556:	4603      	mov	r3, r0
 8000558:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <CAN_Diag_Generate_Reply+0x294>)
 8000560:	2201      	movs	r2, #1
 8000562:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 8000564:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
		break;
 800056a:	e16a      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_READ_MEM32:
		// decode the requested address
		tempData.bytes.byte_hh = DiagRequestData[2];
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 800056e:	789b      	ldrb	r3, [r3, #2]
 8000570:	72fb      	strb	r3, [r7, #11]
		tempData.bytes.byte_hl = DiagRequestData[3];
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 8000574:	78db      	ldrb	r3, [r3, #3]
 8000576:	72bb      	strb	r3, [r7, #10]
		tempData.bytes.byte_lh = DiagRequestData[4];
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	727b      	strb	r3, [r7, #9]
		tempData.bytes.byte_ll = DiagRequestData[5];
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 8000580:	795b      	ldrb	r3, [r3, #5]
 8000582:	723b      	strb	r3, [r7, #8]
		// decode address and initialise pointer
		pMemory = (uint32_t *)tempData.word32;
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	461a      	mov	r2, r3
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <CAN_Diag_Generate_Reply+0x298>)
 800058a:	601a      	str	r2, [r3, #0]
		tempData.bytes.byte_hh = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	72fb      	strb	r3, [r7, #11]
		tempData.bytes.byte_hl = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	72bb      	strb	r3, [r7, #10]
		tempData.bytes.byte_lh = DiagRequestData[6];
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 8000596:	799b      	ldrb	r3, [r3, #6]
 8000598:	727b      	strb	r3, [r7, #9]
		tempData.bytes.byte_ll = DiagRequestData[7];
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <CAN_Diag_Generate_Reply+0x290>)
 800059c:	79db      	ldrb	r3, [r3, #7]
 800059e:	723b      	strb	r3, [r7, #8]
		DiagReplyTxCnt = 1 + tempData.word32; //send whatever number of reply messages
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <CAN_Diag_Generate_Reply+0x294>)
 80005aa:	801a      	strh	r2, [r3, #0]
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 80005ac:	239a      	movs	r3, #154	; 0x9a
 80005ae:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	43db      	mvns	r3, r3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	737b      	strb	r3, [r7, #13]
		// read memory location and store the data
		tempData.word32 = *pMemory;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <CAN_Diag_Generate_Reply+0x298>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60bb      	str	r3, [r7, #8]
		txDataBuff[2] = tempData.bytes.byte_hh;
 80005c2:	7afb      	ldrb	r3, [r7, #11]
 80005c4:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = tempData.bytes.byte_hl;
 80005c6:	7abb      	ldrb	r3, [r7, #10]
 80005c8:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = tempData.bytes.byte_lh;
 80005ca:	7a7b      	ldrb	r3, [r7, #9]
 80005cc:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = tempData.bytes.byte_ll;
 80005ce:	7a3b      	ldrb	r3, [r7, #8]
 80005d0:	747b      	strb	r3, [r7, #17]
		DiagReplyIdx = 1;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <CAN_Diag_Generate_Reply+0x29c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	801a      	strh	r2, [r3, #0]
		tempData.word32 = DiagReplyIdx - 1; //send whatever number of reply messages
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <CAN_Diag_Generate_Reply+0x29c>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
		txDataBuff[6] = tempData.bytes.byte_lh;;
 80005e0:	7a7b      	ldrb	r3, [r7, #9]
 80005e2:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = tempData.bytes.byte_ll;
 80005e4:	7a3b      	ldrb	r3, [r7, #8]
 80005e6:	74fb      	strb	r3, [r7, #19]
		pMemory++;			//add 4 byte offset for next read
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <CAN_Diag_Generate_Reply+0x298>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3304      	adds	r3, #4
 80005ee:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <CAN_Diag_Generate_Reply+0x298>)
 80005f0:	6013      	str	r3, [r2, #0]
		DiagReplyIdx++;
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <CAN_Diag_Generate_Reply+0x29c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <CAN_Diag_Generate_Reply+0x29c>)
 80005fc:	801a      	strh	r2, [r3, #0]
		if(DiagReplyTxCnt > 1) { //this is a multi-part reply message spread over several transmissions
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <CAN_Diag_Generate_Reply+0x294>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d903      	bls.n	800060e <CAN_Diag_Generate_Reply+0x282>
			DiagCommand = DIAG_CMD_READ_MEM32_CONTINUED;
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 8000608:	2283      	movs	r2, #131	; 0x83
 800060a:	701a      	strb	r2, [r3, #0]
		} else {
			DiagCommand = DIAG_CMD_IDLE;
		}
		break;
 800060c:	e119      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
			DiagCommand = DIAG_CMD_IDLE;
 800060e:	4b02      	ldr	r3, [pc, #8]	; (8000618 <CAN_Diag_Generate_Reply+0x28c>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
		break;
 8000614:	e115      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
 8000616:	bf00      	nop
 8000618:	20000114 	.word	0x20000114
 800061c:	2000011c 	.word	0x2000011c
 8000620:	20000112 	.word	0x20000112
 8000624:	20000118 	.word	0x20000118
 8000628:	20000110 	.word	0x20000110
	case DIAG_CMD_READ_MEM32_CONTINUED:
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 800062c:	239a      	movs	r3, #154	; 0x9a
 800062e:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~(uint8_t)DIAG_CMD_READ_MEM32;     //inverted command byte
 8000630:	23ec      	movs	r3, #236	; 0xec
 8000632:	737b      	strb	r3, [r7, #13]
		// read memory location and store the data
		tempData.word32 = *pMemory;
 8000634:	4b95      	ldr	r3, [pc, #596]	; (800088c <CAN_Diag_Generate_Reply+0x500>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	60bb      	str	r3, [r7, #8]
		txDataBuff[2] = tempData.bytes.byte_hh;
 800063c:	7afb      	ldrb	r3, [r7, #11]
 800063e:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = tempData.bytes.byte_hl;
 8000640:	7abb      	ldrb	r3, [r7, #10]
 8000642:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = tempData.bytes.byte_lh;
 8000644:	7a7b      	ldrb	r3, [r7, #9]
 8000646:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = tempData.bytes.byte_ll;
 8000648:	7a3b      	ldrb	r3, [r7, #8]
 800064a:	747b      	strb	r3, [r7, #17]
		tempData.word32 = DiagReplyIdx -  1; //send whatever number of reply messages
 800064c:	4b90      	ldr	r3, [pc, #576]	; (8000890 <CAN_Diag_Generate_Reply+0x504>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
		txDataBuff[6] = tempData.bytes.byte_lh;;
 8000654:	7a7b      	ldrb	r3, [r7, #9]
 8000656:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = tempData.bytes.byte_ll;
 8000658:	7a3b      	ldrb	r3, [r7, #8]
 800065a:	74fb      	strb	r3, [r7, #19]
		pMemory++;			//add 4 byte offset for next read
 800065c:	4b8b      	ldr	r3, [pc, #556]	; (800088c <CAN_Diag_Generate_Reply+0x500>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3304      	adds	r3, #4
 8000662:	4a8a      	ldr	r2, [pc, #552]	; (800088c <CAN_Diag_Generate_Reply+0x500>)
 8000664:	6013      	str	r3, [r2, #0]
		DiagReplyIdx++;
 8000666:	4b8a      	ldr	r3, [pc, #552]	; (8000890 <CAN_Diag_Generate_Reply+0x504>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b88      	ldr	r3, [pc, #544]	; (8000890 <CAN_Diag_Generate_Reply+0x504>)
 8000670:	801a      	strh	r2, [r3, #0]
		if(DiagReplyTxCnt > 1) { //this is a multi-part reply message spread over several transmissions
 8000672:	4b88      	ldr	r3, [pc, #544]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d903      	bls.n	8000682 <CAN_Diag_Generate_Reply+0x2f6>
			DiagCommand = DIAG_CMD_READ_MEM32_CONTINUED;
 800067a:	4b87      	ldr	r3, [pc, #540]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 800067c:	2283      	movs	r2, #131	; 0x83
 800067e:	701a      	strb	r2, [r3, #0]
		} else {
			DiagCommand = DIAG_CMD_IDLE;
		}
		break;
 8000680:	e0df      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
			DiagCommand = DIAG_CMD_IDLE;
 8000682:	4b85      	ldr	r3, [pc, #532]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		break;
 8000688:	e0db      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_FLASH_ERASE_SECT:
		// decode the requested address
		sector = DiagRequestData[7];
 800068a:	4b84      	ldr	r3, [pc, #528]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 800068c:	79db      	ldrb	r3, [r3, #7]
 800068e:	75fb      	strb	r3, [r7, #23]
		erase_flash_sector(sector);
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f93a 	bl	800090c <erase_flash_sector>
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 8000698:	239a      	movs	r3, #154	; 0x9a
 800069a:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 800069c:	4b7e      	ldr	r3, [pc, #504]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	43db      	mvns	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = 0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = 0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = 0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = sector;
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 80006be:	4b75      	ldr	r3, [pc, #468]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 80006c4:	4b74      	ldr	r3, [pc, #464]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		break;
 80006ca:	e0ba      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_FLASH_PROG_LOW:
		// decode the requested address
		flashDataLo.bytes.byte_hh = DiagRequestData[2];
 80006cc:	4b73      	ldr	r3, [pc, #460]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80006ce:	789a      	ldrb	r2, [r3, #2]
 80006d0:	4b73      	ldr	r3, [pc, #460]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 80006d2:	70da      	strb	r2, [r3, #3]
		flashDataLo.bytes.byte_hl = DiagRequestData[3];
 80006d4:	4b71      	ldr	r3, [pc, #452]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80006d6:	78da      	ldrb	r2, [r3, #3]
 80006d8:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 80006da:	709a      	strb	r2, [r3, #2]
		flashDataLo.bytes.byte_lh = DiagRequestData[4];
 80006dc:	4b6f      	ldr	r3, [pc, #444]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80006de:	791a      	ldrb	r2, [r3, #4]
 80006e0:	4b6f      	ldr	r3, [pc, #444]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 80006e2:	705a      	strb	r2, [r3, #1]
		flashDataLo.bytes.byte_ll = DiagRequestData[5];
 80006e4:	4b6d      	ldr	r3, [pc, #436]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80006e6:	795a      	ldrb	r2, [r3, #5]
 80006e8:	4b6d      	ldr	r3, [pc, #436]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 80006ea:	701a      	strb	r2, [r3, #0]
		flashAddr.bytes.byte_lh = DiagRequestData[6];
 80006ec:	4b6b      	ldr	r3, [pc, #428]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80006ee:	799a      	ldrb	r2, [r3, #6]
 80006f0:	4b6c      	ldr	r3, [pc, #432]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 80006f2:	705a      	strb	r2, [r3, #1]
		flashAddr.bytes.byte_ll = DiagRequestData[7];
 80006f4:	4b69      	ldr	r3, [pc, #420]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80006f6:	79da      	ldrb	r2, [r3, #7]
 80006f8:	4b6a      	ldr	r3, [pc, #424]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 80006fa:	701a      	strb	r2, [r3, #0]
		// build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 80006fc:	239a      	movs	r3, #154	; 0x9a
 80006fe:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 8000700:	4b65      	ldr	r3, [pc, #404]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	43db      	mvns	r3, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = flashDataLo.bytes.byte_hh;
 800070a:	4b65      	ldr	r3, [pc, #404]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 800070c:	78db      	ldrb	r3, [r3, #3]
 800070e:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = flashDataLo.bytes.byte_hl;
 8000710:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = flashDataLo.bytes.byte_lh;
 8000716:	4b62      	ldr	r3, [pc, #392]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 8000718:	785b      	ldrb	r3, [r3, #1]
 800071a:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = flashDataLo.bytes.byte_ll;
 800071c:	4b60      	ldr	r3, [pc, #384]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = flashAddr.bytes.byte_lh;
 8000722:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = flashAddr.bytes.byte_ll;
 8000728:	4b5e      	ldr	r3, [pc, #376]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 800072e:	4b59      	ldr	r3, [pc, #356]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 8000730:	2201      	movs	r2, #1
 8000732:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 8000734:	4b58      	ldr	r3, [pc, #352]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
		break;
 800073a:	e082      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_FLASH_PROG_HIGH:
		// decode the requested address
		flashDataHi.bytes.byte_hh = DiagRequestData[2];
 800073c:	4b57      	ldr	r3, [pc, #348]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 800073e:	789a      	ldrb	r2, [r3, #2]
 8000740:	4b59      	ldr	r3, [pc, #356]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 8000742:	70da      	strb	r2, [r3, #3]
		flashDataHi.bytes.byte_hl = DiagRequestData[3];
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 8000746:	78da      	ldrb	r2, [r3, #3]
 8000748:	4b57      	ldr	r3, [pc, #348]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 800074a:	709a      	strb	r2, [r3, #2]
		flashDataHi.bytes.byte_lh = DiagRequestData[4];
 800074c:	4b53      	ldr	r3, [pc, #332]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 800074e:	791a      	ldrb	r2, [r3, #4]
 8000750:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 8000752:	705a      	strb	r2, [r3, #1]
		flashDataHi.bytes.byte_ll = DiagRequestData[5];
 8000754:	4b51      	ldr	r3, [pc, #324]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 8000756:	795a      	ldrb	r2, [r3, #5]
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 800075a:	701a      	strb	r2, [r3, #0]
		flashAddr.bytes.byte_hh = DiagRequestData[6];
 800075c:	4b4f      	ldr	r3, [pc, #316]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 800075e:	799a      	ldrb	r2, [r3, #6]
 8000760:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 8000762:	70da      	strb	r2, [r3, #3]
		flashAddr.bytes.byte_hl = DiagRequestData[7];
 8000764:	4b4d      	ldr	r3, [pc, #308]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 8000766:	79da      	ldrb	r2, [r3, #7]
 8000768:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 800076a:	709a      	strb	r2, [r3, #2]
		// build the reply message
		dataToProg64 = flashDataLo.word32 | (((uint64_t)flashDataHi.word32) << 32);
 800076c:	4b4c      	ldr	r3, [pc, #304]	; (80008a0 <CAN_Diag_Generate_Reply+0x514>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	461c      	mov	r4, r3
 8000774:	4615      	mov	r5, r2
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	469a      	mov	sl, r3
 800077e:	4693      	mov	fp, r2
 8000780:	f04f 0200 	mov.w	r2, #0
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	4653      	mov	r3, sl
 800078a:	2200      	movs	r2, #0
 800078c:	ea44 0802 	orr.w	r8, r4, r2
 8000790:	ea45 0903 	orr.w	r9, r5, r3
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <CAN_Diag_Generate_Reply+0x520>)
 8000796:	e9c3 8900 	strd	r8, r9, [r3]
		program_flash_double_word(flashAddr.word32,dataToProg64);
 800079a:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	4b43      	ldr	r3, [pc, #268]	; (80008ac <CAN_Diag_Generate_Reply+0x520>)
 80007a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a4:	4608      	mov	r0, r1
 80007a6:	f000 f8f7 	bl	8000998 <program_flash_double_word>
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 80007aa:	239a      	movs	r3, #154	; 0x9a
 80007ac:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 80007ae:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	43db      	mvns	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = flashDataHi.bytes.byte_hh;
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 80007ba:	78db      	ldrb	r3, [r3, #3]
 80007bc:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = flashDataHi.bytes.byte_hl;
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = flashDataHi.bytes.byte_lh;
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = flashDataHi.bytes.byte_ll;
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <CAN_Diag_Generate_Reply+0x51c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = flashAddr.bytes.byte_hh;
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = flashAddr.bytes.byte_hl;
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <CAN_Diag_Generate_Reply+0x518>)
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 80007de:	2201      	movs	r2, #1
 80007e0:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e02b      	b.n	8000842 <CAN_Diag_Generate_Reply+0x4b6>
	case DIAG_CMD_RESET_REQ:
		// decode the requested address
		tempData.bytes.byte_hh = DiagRequestData[2];
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	72fb      	strb	r3, [r7, #11]
		tempData.bytes.byte_hl = DiagRequestData[3];
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80007f2:	78db      	ldrb	r3, [r3, #3]
 80007f4:	72bb      	strb	r3, [r7, #10]
		tempData.bytes.byte_lh = DiagRequestData[4];
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	727b      	strb	r3, [r7, #9]
		tempData.bytes.byte_ll = DiagRequestData[5];
 80007fc:	4b27      	ldr	r3, [pc, #156]	; (800089c <CAN_Diag_Generate_Reply+0x510>)
 80007fe:	795b      	ldrb	r3, [r3, #5]
 8000800:	723b      	strb	r3, [r7, #8]
		if(tempData.word32 == CODE_PRESENT_MARKER_DATA) {
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <CAN_Diag_Generate_Reply+0x524>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d101      	bne.n	800080e <CAN_Diag_Generate_Reply+0x482>
			//jump to application
			//does not return if app is there
			doJumpToApplication();
 800080a:	f000 f857 	bl	80008bc <doJumpToApplication>
		}
		// no need to build the reply message
		txDataBuff[0] = CAN_MSG_NODE_ID;  //this ECU node address
 800080e:	239a      	movs	r3, #154	; 0x9a
 8000810:	733b      	strb	r3, [r7, #12]
		txDataBuff[1] = ~DiagCommand;     //inverted command byte
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	43db      	mvns	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	737b      	strb	r3, [r7, #13]
		txDataBuff[2] = tempData.bytes.byte_hh;
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	73bb      	strb	r3, [r7, #14]
		txDataBuff[3] = tempData.bytes.byte_hl;
 8000820:	7abb      	ldrb	r3, [r7, #10]
 8000822:	73fb      	strb	r3, [r7, #15]
		txDataBuff[4] = tempData.bytes.byte_lh;
 8000824:	7a7b      	ldrb	r3, [r7, #9]
 8000826:	743b      	strb	r3, [r7, #16]
		txDataBuff[5] = tempData.bytes.byte_ll;
 8000828:	7a3b      	ldrb	r3, [r7, #8]
 800082a:	747b      	strb	r3, [r7, #17]
		txDataBuff[6] = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	74bb      	strb	r3, [r7, #18]
		txDataBuff[7] = 0x00;
 8000830:	2300      	movs	r3, #0
 8000832:	74fb      	strb	r3, [r7, #19]
		DiagReplyTxCnt = 1;  //send one reply message
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 8000836:	2201      	movs	r2, #1
 8000838:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
		break;
 8000840:	bf00      	nop

	}

	if(DiagReplyTxCnt > 0) {
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d015      	beq.n	8000876 <CAN_Diag_Generate_Reply+0x4ea>
		DiagReplyTxCnt--;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	3b01      	subs	r3, #1
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 8000854:	801a      	strh	r2, [r3, #0]
		// send out reply
		if (HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0)
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f001 f9eb 	bl	8001c32 <HAL_CAN_GetTxMailboxesFreeLevel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00f      	beq.n	8000882 <CAN_Diag_Generate_Reply+0x4f6>
		{
			HAL_CAN_AddTxMessage(hcan, pCanHeader, txDataBuff, pCanTxMailbox);  //initiate transmission of message 0x254
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <CAN_Diag_Generate_Reply+0x528>)
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <CAN_Diag_Generate_Reply+0x52c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f107 020c 	add.w	r2, r7, #12
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f001 f90f 	bl	8001a92 <HAL_CAN_AddTxMessage>
	} else {
		//we are done with this command
		DiagReplyTxCnt = 0;
		DiagCommand = DIAG_CMD_IDLE;
	}
}
 8000874:	e005      	b.n	8000882 <CAN_Diag_Generate_Reply+0x4f6>
		DiagReplyTxCnt = 0;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <CAN_Diag_Generate_Reply+0x508>)
 8000878:	2200      	movs	r2, #0
 800087a:	801a      	strh	r2, [r3, #0]
		DiagCommand = DIAG_CMD_IDLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <CAN_Diag_Generate_Reply+0x50c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800088c:	20000118 	.word	0x20000118
 8000890:	20000110 	.word	0x20000110
 8000894:	20000112 	.word	0x20000112
 8000898:	20000114 	.word	0x20000114
 800089c:	2000011c 	.word	0x2000011c
 80008a0:	20000100 	.word	0x20000100
 80008a4:	200000fc 	.word	0x200000fc
 80008a8:	20000104 	.word	0x20000104
 80008ac:	20000108 	.word	0x20000108
 80008b0:	deadbeef 	.word	0xdeadbeef
 80008b4:	200000a0 	.word	0x200000a0
 80008b8:	20000084 	.word	0x20000084

080008bc <doJumpToApplication>:

void doJumpToApplication(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
#define APPLICATION_ADDRESS (uint32_t)0x08008000
	typedef void (*pFunction)(void);

	//check if there is a valid application
	//check code present flag
	pMemory = (uint32_t*)APP_PRESENT_MARKER_ADDR;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <doJumpToApplication+0x3c>)
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <doJumpToApplication+0x40>)
 80008c6:	601a      	str	r2, [r3, #0]
	if(*pMemory == CODE_PRESENT_MARKER_DATA) {
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <doJumpToApplication+0x3c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <doJumpToApplication+0x44>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d10d      	bne.n	80008f0 <doJumpToApplication+0x34>
		pFunction Jump_To_Application;
		uint32_t JumpAddress;
		/* Jump to user application */
		JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <doJumpToApplication+0x48>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pFunction) JumpAddress;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
		/* Initialize user application's Stack Pointer */
		__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <doJumpToApplication+0x4c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f383 8808 	msr	MSP, r3
}
 80008ea:	bf00      	nop
		Jump_To_Application();
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4798      	blx	r3
	}
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000118 	.word	0x20000118
 80008fc:	0802fff8 	.word	0x0802fff8
 8000900:	deadbeef 	.word	0xdeadbeef
 8000904:	08008004 	.word	0x08008004
 8000908:	08008000 	.word	0x08008000

0800090c <erase_flash_sector>:

#include "flash_functions.h"
#include "stm32l4xx_hal.h"


void erase_flash_sector(uint8_t sector_number) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	uint32_t PAGEError = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
	uint32_t pageStartIdx = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pageNumPages = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
	//one sector is 32 pages
	//flash offset is 0x08008000 for application, so sectors start there
	//each block is 256 pages of 2kb
	//sector 3 is used for fault memory

	switch(sector_number) {
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d81f      	bhi.n	8000968 <erase_flash_sector+0x5c>
 8000928:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <erase_flash_sector+0x24>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	08000941 	.word	0x08000941
 8000934:	0800094b 	.word	0x0800094b
 8000938:	08000955 	.word	0x08000955
 800093c:	0800095f 	.word	0x0800095f
	case 0:
		pageStartIdx = SECTOR0_PAGE_START;
 8000940:	2310      	movs	r3, #16
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
		pageNumPages = SECTOR0_PAGE_SIZE;
 8000944:	2310      	movs	r3, #16
 8000946:	623b      	str	r3, [r7, #32]
		break;
 8000948:	e00e      	b.n	8000968 <erase_flash_sector+0x5c>
	case 1:
		pageStartIdx = SECTOR1_PAGE_START;
 800094a:	2320      	movs	r3, #32
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
		pageNumPages = SECTOR1_PAGE_SIZE;
 800094e:	2320      	movs	r3, #32
 8000950:	623b      	str	r3, [r7, #32]
		break;
 8000952:	e009      	b.n	8000968 <erase_flash_sector+0x5c>
	case 2:
		pageStartIdx = SECTOR2_PAGE_START;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
		pageNumPages = SECTOR2_PAGE_SIZE;
 8000958:	2320      	movs	r3, #32
 800095a:	623b      	str	r3, [r7, #32]
		break;
 800095c:	e004      	b.n	8000968 <erase_flash_sector+0x5c>
	case 3:
		pageStartIdx = SECTOR3_PAGE_START;
 800095e:	2360      	movs	r3, #96	; 0x60
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
		pageNumPages = SECTOR3_PAGE_SIZE;
 8000962:	2320      	movs	r3, #32
 8000964:	623b      	str	r3, [r7, #32]
		break;
 8000966:	bf00      	nop
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Page = pageStartIdx;  //starting page to erase
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Banks = FLASH_BANK_1;  // can be FLASH_BANK_1 or FLASH_BANK_2
 8000970:	2301      	movs	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = pageNumPages;
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8000978:	f001 fe40 	bl	80025fc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);    //return HAL_OK if success
 800097c:	f107 021c 	add.w	r2, r7, #28
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 ff1e 	bl	80027c8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800098c:	f001 fe58 	bl	8002640 <HAL_FLASH_Lock>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <program_flash_double_word>:

void program_flash_double_word(uint32_t Address, uint64_t DataToProg64) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_Unlock();
 80009a4:	f001 fe2a 	bl	80025fc <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DataToProg64);
 80009a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009ac:	68f9      	ldr	r1, [r7, #12]
 80009ae:	2000      	movs	r0, #0
 80009b0:	f001 fdb8 	bl	8002524 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80009b4:	f001 fe44 	bl	8002640 <HAL_FLASH_Lock>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <Set_Green_Led_On_Off>:
uint8_t  LedGreenState = 0;
uint8_t  LedRedPattern = 0;
uint8_t  LedGreenPattern = 0;


void Set_Green_Led_On_Off(uint8_t state) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <Set_Green_Led_On_Off+0x16>
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d006      	beq.n	80009e2 <Set_Green_Led_On_Off+0x22>
 80009d4:	e00b      	b.n	80009ee <Set_Green_Led_On_Off+0x2e>
	case (LED_GREEN_STATE_OFF):
		SET_LED_GREEN_OFF;
 80009d6:	2200      	movs	r2, #0
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <Set_Green_Led_On_Off+0x44>)
 80009dc:	f002 f994 	bl	8002d08 <HAL_GPIO_WritePin>
		break;
 80009e0:	e00b      	b.n	80009fa <Set_Green_Led_On_Off+0x3a>
	case (LED_GREEN_STATE_ON):
		SET_LED_GREEN_ON;
 80009e2:	2201      	movs	r2, #1
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <Set_Green_Led_On_Off+0x44>)
 80009e8:	f002 f98e 	bl	8002d08 <HAL_GPIO_WritePin>
		break;
 80009ec:	e005      	b.n	80009fa <Set_Green_Led_On_Off+0x3a>
	default:
		SET_LED_GREEN_OFF;
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <Set_Green_Led_On_Off+0x44>)
 80009f4:	f002 f988 	bl	8002d08 <HAL_GPIO_WritePin>
		break;
 80009f8:	bf00      	nop
	}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	48000400 	.word	0x48000400

08000a08 <Set_Red_Led_On_Off>:

void Set_Red_Led_On_Off(uint8_t state) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <Set_Red_Led_On_Off+0x16>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d006      	beq.n	8000a2a <Set_Red_Led_On_Off+0x22>
 8000a1c:	e00b      	b.n	8000a36 <Set_Red_Led_On_Off+0x2e>
	case (LED_RED_STATE_OFF):
		SET_LED_RED_OFF;
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <Set_Red_Led_On_Off+0x44>)
 8000a24:	f002 f970 	bl	8002d08 <HAL_GPIO_WritePin>
		break;
 8000a28:	e00b      	b.n	8000a42 <Set_Red_Led_On_Off+0x3a>
	case (LED_RED_STATE_ON):
		SET_LED_RED_ON;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <Set_Red_Led_On_Off+0x44>)
 8000a30:	f002 f96a 	bl	8002d08 <HAL_GPIO_WritePin>
		break;
 8000a34:	e005      	b.n	8000a42 <Set_Red_Led_On_Off+0x3a>
	default:
		SET_LED_RED_OFF;
 8000a36:	2200      	movs	r2, #0
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <Set_Red_Led_On_Off+0x44>)
 8000a3c:	f002 f964 	bl	8002d08 <HAL_GPIO_WritePin>
		break;
 8000a40:	bf00      	nop
	}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	48000400 	.word	0x48000400

08000a50 <Request_Green_Led_State>:

void Request_Green_Led_State(uint8_t state) {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	LedGreenState = state;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <Request_Green_Led_State+0x1c>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	7013      	strb	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20000129 	.word	0x20000129

08000a70 <Update_Green_Led_State>:

void Request_Red_Led_State(uint8_t state) {
	LedRedState = state;
}

void Update_Green_Led_State(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	if(LedGreenDelayCount > 0) {
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <Update_Green_Led_State+0x68>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <Update_Green_Led_State+0x1a>
		LedGreenDelayCount--;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <Update_Green_Led_State+0x68>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <Update_Green_Led_State+0x68>)
 8000a86:	801a      	strh	r2, [r3, #0]
			LedGreenDelayCount = LED_GREEN_OFF_TIME;
			LedGreenState = LED_GREEN_STATE_OFF;
			break;
	  }
	}
}
 8000a88:	e024      	b.n	8000ad4 <Update_Green_Led_State+0x64>
	  switch (LedGreenState) {
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <Update_Green_Led_State+0x6c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <Update_Green_Led_State+0x28>
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d00a      	beq.n	8000aac <Update_Green_Led_State+0x3c>
 8000a96:	e013      	b.n	8000ac0 <Update_Green_Led_State+0x50>
			Set_Green_Led_On_Off(LED_GREEN_STATE_OFF);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff91 	bl	80009c0 <Set_Green_Led_On_Off>
			LedGreenDelayCount = LED_GREEN_OFF_TIME;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <Update_Green_Led_State+0x68>)
 8000aa0:	2264      	movs	r2, #100	; 0x64
 8000aa2:	801a      	strh	r2, [r3, #0]
			LedGreenState = LED_GREEN_STATE_OFF;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <Update_Green_Led_State+0x6c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
			break;
 8000aaa:	e013      	b.n	8000ad4 <Update_Green_Led_State+0x64>
			Set_Green_Led_On_Off(LED_GREEN_STATE_ON);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff ff87 	bl	80009c0 <Set_Green_Led_On_Off>
			LedGreenDelayCount = LED_GREEN_ON_TIME;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <Update_Green_Led_State+0x68>)
 8000ab4:	2264      	movs	r2, #100	; 0x64
 8000ab6:	801a      	strh	r2, [r3, #0]
			LedGreenState = LED_GREEN_STATE_OFF;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <Update_Green_Led_State+0x6c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
			break;
 8000abe:	e009      	b.n	8000ad4 <Update_Green_Led_State+0x64>
			Set_Green_Led_On_Off(LED_GREEN_STATE_OFF);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff ff7d 	bl	80009c0 <Set_Green_Led_On_Off>
			LedGreenDelayCount = LED_GREEN_OFF_TIME;
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <Update_Green_Led_State+0x68>)
 8000ac8:	2264      	movs	r2, #100	; 0x64
 8000aca:	801a      	strh	r2, [r3, #0]
			LedGreenState = LED_GREEN_STATE_OFF;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <Update_Green_Led_State+0x6c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
			break;
 8000ad2:	bf00      	nop
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000126 	.word	0x20000126
 8000adc:	20000129 	.word	0x20000129

08000ae0 <Update_Red_Led_State>:

void Update_Red_Led_State(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	if(LedRedDelayCount > 0) {
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <Update_Red_Led_State+0x6c>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <Update_Red_Led_State+0x1a>
		LedRedDelayCount--;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <Update_Red_Led_State+0x6c>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <Update_Red_Led_State+0x6c>)
 8000af6:	801a      	strh	r2, [r3, #0]
			LedRedDelayCount = LED_RED_OFF_TIME;
			LedRedState = LED_RED_STATE_OFF;
			break;
	  }
	}
}
 8000af8:	e026      	b.n	8000b48 <Update_Red_Led_State+0x68>
	  switch (LedRedState) {
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <Update_Red_Led_State+0x70>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <Update_Red_Led_State+0x28>
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d00b      	beq.n	8000b1e <Update_Red_Led_State+0x3e>
 8000b06:	e014      	b.n	8000b32 <Update_Red_Led_State+0x52>
			Set_Red_Led_On_Off(LED_RED_STATE_OFF);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ff7d 	bl	8000a08 <Set_Red_Led_On_Off>
			LedRedDelayCount = LED_RED_OFF_TIME;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <Update_Red_Led_State+0x6c>)
 8000b10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b14:	801a      	strh	r2, [r3, #0]
			LedRedState = LED_RED_STATE_ON;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <Update_Red_Led_State+0x70>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
			break;
 8000b1c:	e014      	b.n	8000b48 <Update_Red_Led_State+0x68>
			Set_Red_Led_On_Off(LED_RED_STATE_ON);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ff72 	bl	8000a08 <Set_Red_Led_On_Off>
			LedRedDelayCount = LED_RED_ON_TIME;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <Update_Red_Led_State+0x6c>)
 8000b26:	22c8      	movs	r2, #200	; 0xc8
 8000b28:	801a      	strh	r2, [r3, #0]
			LedRedState = LED_RED_STATE_OFF;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <Update_Red_Led_State+0x70>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
			break;
 8000b30:	e00a      	b.n	8000b48 <Update_Red_Led_State+0x68>
			Set_Red_Led_On_Off(LED_RED_STATE_OFF);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff68 	bl	8000a08 <Set_Red_Led_On_Off>
			LedRedDelayCount = LED_RED_OFF_TIME;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <Update_Red_Led_State+0x6c>)
 8000b3a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b3e:	801a      	strh	r2, [r3, #0]
			LedRedState = LED_RED_STATE_OFF;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <Update_Red_Led_State+0x70>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
			break;
 8000b46:	bf00      	nop
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000124 	.word	0x20000124
 8000b50:	20000128 	.word	0x20000128

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
uint8_t runApplication = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	77fb      	strb	r3, [r7, #31]
typedef void (*pFunction)(void);

  /* USER CODE BEGIN 1 */
	//check for app entry
	uint32_t *memPtr;
	memPtr = (uint32_t*)STACK_AREA_WATERMARK_ADDR;
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <main+0xe8>)
 8000b60:	617b      	str	r3, [r7, #20]
	//check stack are for watermark value
	if(*memPtr != 0xDEADBEEF) {
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a36      	ldr	r2, [pc, #216]	; (8000c40 <main+0xec>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d009      	beq.n	8000b80 <main+0x2c>
		//check code present flag
		memPtr = (uint32_t*)APP_PRESENT_MARKER_ADDR;
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <main+0xf0>)
 8000b6e:	617b      	str	r3, [r7, #20]
		if(*memPtr == 0xDEADBEEF) {
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <main+0xec>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d105      	bne.n	8000b86 <main+0x32>
			runApplication = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	77fb      	strb	r3, [r7, #31]
 8000b7e:	e002      	b.n	8000b86 <main+0x32>
		}
	} else {
		//we are here due to app calling bootloader, so continue
		*memPtr = 0x0;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fd06 	bl	8001596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f86b 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 f951 	bl	8000e34 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b92:	f000 f8b7 	bl	8000d04 <MX_CAN1_Init>
  MX_TIM6_Init();
 8000b96:	f000 f915 	bl	8000dc4 <MX_TIM6_Init>
  MX_CRC_Init();
 8000b9a:	f000 f8ed 	bl	8000d78 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim6);
 8000b9e:	482a      	ldr	r0, [pc, #168]	; (8000c48 <main+0xf4>)
 8000ba0:	f002 ff84 	bl	8003aac <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim6,0);  // set the counter value to 0
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <main+0xf4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24

  if(runApplication) {
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d031      	beq.n	8000c16 <main+0xc2>
  	//code is present so we can run run the application if OK
	//check SRAM is OK before running the application

	if(Do_Sram_Pattern_Test(&hcrc) == SRAM_TEST_RESULT_PASS) {
 8000bb2:	4826      	ldr	r0, [pc, #152]	; (8000c4c <main+0xf8>)
 8000bb4:	f000 fa96 	bl	80010e4 <Do_Sram_Pattern_Test>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2baa      	cmp	r3, #170	; 0xaa
 8000bbc:	d12b      	bne.n	8000c16 <main+0xc2>
		//SRAM test passed so check flash image CRC
		//Do flash CRC test...
		Set_CRC_Instance(&hcrc);
 8000bbe:	4823      	ldr	r0, [pc, #140]	; (8000c4c <main+0xf8>)
 8000bc0:	f000 fb62 	bl	8001288 <Set_CRC_Instance>
		Set_CRC_Start_Address((uint32_t) ADDR_FLASH_APPLICATION_CODE_START);
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <main+0xfc>)
 8000bc6:	f000 fb6f 	bl	80012a8 <Set_CRC_Start_Address>
		Set_CRC_End_Address((uint32_t) ADDR_FLASH_APPLICATION_CODE_END);
 8000bca:	4822      	ldr	r0, [pc, #136]	; (8000c54 <main+0x100>)
 8000bcc:	f000 fb7c 	bl	80012c8 <Set_CRC_End_Address>
		Start_CRC_Calculation ();
 8000bd0:	f000 fb8a 	bl	80012e8 <Start_CRC_Calculation>
		uint32_t *expectedCrcMemPtr;
		expectedCrcMemPtr = (uint32_t*)FLASH_CHECKSUM_MARKER_ADDR;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <main+0x104>)
 8000bd6:	613b      	str	r3, [r7, #16]
		uint32_t calcChecksum = Report_CRC_Result_Value();
 8000bd8:	f000 fbc4 	bl	8001364 <Report_CRC_Result_Value>
 8000bdc:	60f8      	str	r0, [r7, #12]
		uint32_t storedChecksum = *expectedCrcMemPtr;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	61bb      	str	r3, [r7, #24]

		if(storedChecksum == 0xFFFFFFFF) {
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bea:	d101      	bne.n	8000bf0 <main+0x9c>
			//flash is erased but App is valid due to debugger connected
			//so OK to run anyway
			storedChecksum = calcChecksum;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	61bb      	str	r3, [r7, #24]
		}
		if(storedChecksum == calcChecksum) {
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d10e      	bne.n	8000c16 <main+0xc2>
			//flash CRC is correct, so OK to run it
			pFunction Jump_To_Application;
			uint32_t JumpAddress;
			// Jump to user application
			JumpAddress = *(__IO uint32_t*) (ADDR_FLASH_APPLICATION_START + 4);
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <main+0x108>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60bb      	str	r3, [r7, #8]
			Jump_To_Application = (pFunction) JumpAddress;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	607b      	str	r3, [r7, #4]
			 //Initialize user application's Stack Pointer
			__set_MSP(*(__IO uint32_t*) ADDR_FLASH_APPLICATION_START);
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <main+0xfc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f383 8808 	msr	MSP, r3
}
 8000c0e:	bf00      	nop
			Jump_To_Application(); //does not return
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	//poll timer to see if 1ms expired
	while (__HAL_TIM_GET_COUNTER(&htim6) < TIMER_1MS_CNT); //hang here for next 1ms to pass
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <main+0xf4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	2b63      	cmp	r3, #99	; 0x63
 8000c20:	d9fa      	bls.n	8000c18 <main+0xc4>
	__HAL_TIM_SET_COUNTER(&htim6,0);  // set the counter value back to 0
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <main+0xf4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
	//performed every 1ms
	CAN_RxCheckMsgPendingCallback(&hcan1);  // check if ned CAN data has arrived and process it
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <main+0x10c>)
 8000c2c:	f7ff fb2a 	bl	8000284 <CAN_RxCheckMsgPendingCallback>
	Update_Red_Led_State();   //blink for alive
 8000c30:	f7ff ff56 	bl	8000ae0 <Update_Red_Led_State>
	Update_Green_Led_State(); //blink for CAN activity
 8000c34:	f7ff ff1c 	bl	8000a70 <Update_Green_Led_State>
	while (__HAL_TIM_GET_COUNTER(&htim6) < TIMER_1MS_CNT); //hang here for next 1ms to pass
 8000c38:	e7ed      	b.n	8000c16 <main+0xc2>
 8000c3a:	bf00      	nop
 8000c3c:	2000ffc0 	.word	0x2000ffc0
 8000c40:	deadbeef 	.word	0xdeadbeef
 8000c44:	0802fff8 	.word	0x0802fff8
 8000c48:	20000154 	.word	0x20000154
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	08008000 	.word	0x08008000
 8000c54:	0802fff0 	.word	0x0802fff0
 8000c58:	0802fffc 	.word	0x0802fffc
 8000c5c:	08008004 	.word	0x08008004
 8000c60:	2000012c 	.word	0x2000012c

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b096      	sub	sp, #88	; 0x58
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2244      	movs	r2, #68	; 0x44
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f830 	bl	8003cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8a:	f002 f863 	bl	8002d54 <HAL_PWREx_ControlVoltageScaling>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c94:	f000 fa20 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 f89c 	bl	8002e00 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cce:	f000 fa03 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fc9c 	bl	8003628 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cf6:	f000 f9ef 	bl	80010d8 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3758      	adds	r7, #88	; 0x58
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <MX_CAN1_Init+0x70>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d22:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000d26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d56:	f000 fc93 	bl	8001680 <HAL_CAN_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d60:	f000 f9ba 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Init_Diag_Messages(&hcan1);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <MX_CAN1_Init+0x6c>)
 8000d66:	f7ff fa31 	bl	80001cc <CAN_Init_Diag_Messages>

  /* USER CODE END CAN1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000012c 	.word	0x2000012c
 8000d74:	40006400 	.word	0x40006400

08000d78 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_CRC_Init+0x44>)
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <MX_CRC_Init+0x48>)
 8000d80:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_CRC_Init+0x44>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_CRC_Init+0x44>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_CRC_Init+0x44>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_CRC_Init+0x44>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_CRC_Init+0x44>)
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_CRC_Init+0x44>)
 8000da2:	f001 f9ab 	bl	80020fc <HAL_CRC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000dac:	f000 f994 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
	Set_CRC_Instance(&hcrc);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <MX_CRC_Init+0x44>)
 8000db2:	f000 fa69 	bl	8001288 <Set_CRC_Instance>
  /* USER CODE END CRC_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	40023000 	.word	0x40023000

08000dc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000dd6:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <MX_TIM6_Init+0x6c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000ddc:	f240 321f 	movw	r2, #799	; 0x31f
 8000de0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000dea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000df8:	f002 fe00 	bl	80039fc <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e02:	f000 f969 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_TIM6_Init+0x68>)
 8000e14:	f002 fefa 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e1e:	f000 f95b 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000154 	.word	0x20000154
 8000e30:	40001000 	.word	0x40001000

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b9f      	ldr	r3, [pc, #636]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a9e      	ldr	r2, [pc, #632]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b9c      	ldr	r3, [pc, #624]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b99      	ldr	r3, [pc, #612]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b96      	ldr	r3, [pc, #600]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b93      	ldr	r3, [pc, #588]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a92      	ldr	r2, [pc, #584]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b90      	ldr	r3, [pc, #576]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	4b8d      	ldr	r3, [pc, #564]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a8c      	ldr	r2, [pc, #560]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b8a      	ldr	r3, [pc, #552]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eaa:	4b87      	ldr	r3, [pc, #540]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a86      	ldr	r2, [pc, #536]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b84      	ldr	r3, [pc, #528]	; (80010c8 <MX_GPIO_Init+0x294>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|CAN_RS_Pin|NSS_GPS_Pin
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8000ec8:	4880      	ldr	r0, [pc, #512]	; (80010cc <MX_GPIO_Init+0x298>)
 8000eca:	f001 ff1d 	bl	8002d08 <HAL_GPIO_WritePin>
                          |VL_Pin|WL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_EEPROM_GPIO_Port, NSS_EEPROM_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	487e      	ldr	r0, [pc, #504]	; (80010d0 <MX_GPIO_Init+0x29c>)
 8000ed6:	f001 ff17 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UL_GPIO_Port, UL_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f001 ff11 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : H2_Pin H3_Pin */
  GPIO_InitStruct.Pin = H2_Pin|H3_Pin;
 8000ee6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4872      	ldr	r0, [pc, #456]	; (80010cc <MX_GPIO_Init+0x298>)
 8000f04:	f001 fd86 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : H1_Pin */
  GPIO_InitStruct.Pin = H1_Pin;
 8000f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f001 fd74 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : CPOUT_Pin WH_Pin VH_Pin UH_Pin */
  GPIO_InitStruct.Pin = CPOUT_Pin|WH_Pin|VH_Pin|UH_Pin;
 8000f2c:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 fd62 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin CAN_RS_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|CAN_RS_Pin;
 8000f50:	23e0      	movs	r3, #224	; 0xe0
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4859      	ldr	r0, [pc, #356]	; (80010cc <MX_GPIO_Init+0x298>)
 8000f68:	f001 fd54 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_Pin UP_Pin */
  GPIO_InitStruct.Pin = DW_Pin|UP_Pin;
 8000f6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4853      	ldr	r0, [pc, #332]	; (80010d0 <MX_GPIO_Init+0x29c>)
 8000f82:	f001 fd47 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_EEPROM_Pin */
  GPIO_InitStruct.Pin = NSS_EEPROM_Pin;
 8000f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	484c      	ldr	r0, [pc, #304]	; (80010d0 <MX_GPIO_Init+0x29c>)
 8000fa0:	f001 fd38 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROG_Pin */
  GPIO_InitStruct.Pin = PROG_Pin;
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROG_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4846      	ldr	r0, [pc, #280]	; (80010d0 <MX_GPIO_Init+0x29c>)
 8000fb8:	f001 fd2c 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : CURR_REF_Pin CURR_IN_Pin PCB_TEMP_Pin MOT_TEMP_Pin */
  GPIO_InitStruct.Pin = CURR_REF_Pin|CURR_IN_Pin|PCB_TEMP_Pin|MOT_TEMP_Pin;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fc0:	230b      	movs	r3, #11
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4840      	ldr	r0, [pc, #256]	; (80010d0 <MX_GPIO_Init+0x29c>)
 8000fd0:	f001 fd20 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f001 fd0f 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : POT_OUT_Pin CURR_REFA4_Pin */
  GPIO_InitStruct.Pin = POT_OUT_Pin|CURR_REFA4_Pin;
 8000ff6:	2330      	movs	r3, #48	; 0x30
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f001 fd02 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI_MISO_Pin SPI_SCK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI_MISO_Pin|SPI_SCK_Pin;
 8001010:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001022:	2305      	movs	r3, #5
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4827      	ldr	r0, [pc, #156]	; (80010cc <MX_GPIO_Init+0x298>)
 800102e:	f001 fcf1 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_GPS_Pin */
  GPIO_InitStruct.Pin = NSS_GPS_Pin;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPS_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <MX_GPIO_Init+0x298>)
 800104c:	f001 fce2 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOLTS_IN_Pin */
  GPIO_InitStruct.Pin = VOLTS_IN_Pin;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001054:	230b      	movs	r3, #11
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VOLTS_IN_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f001 fcd5 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : UL_Pin */
  GPIO_InitStruct.Pin = UL_Pin;
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2302      	movs	r3, #2
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UL_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fcc6 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL_Pin WL_Pin */
  GPIO_InitStruct.Pin = VL_Pin|WL_Pin;
 8001088:	2303      	movs	r3, #3
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <MX_GPIO_Init+0x298>)
 80010a0:	f001 fcb8 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80010a4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_GPIO_Init+0x2a0>)
 80010ba:	f001 fcab 	bl	8002a14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48001000 	.word	0x48001000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <Do_Sram_Pattern_Test>:
uint32_t crc_end_address   = ADDR_FLASH_BOOTLOADER_END;
uint32_t crc_result   = 0;
HAL_CRC_StateTypeDef crc_state   = HAL_CRC_STATE_RESET;


uint8_t Do_Sram_Pattern_Test(CRC_HandleTypeDef *hcrc_used) {
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	; 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t test_result = SRAM_TEST_RESULT_UNKNOWN;
 80010ec:	2355      	movs	r3, #85	; 0x55
 80010ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t crc_length   = (ADDR_RAM_TEST_END - ADDR_RAM_TEST_START);
 80010f2:	f64f 7397 	movw	r3, #65431	; 0xff97
 80010f6:	61bb      	str	r3, [r7, #24]
	uint32_t mem_addr;
	uint32_t *memPtr;
	memPtr = (uint32_t*)ADDR_RAM_TEST_START;
 80010f8:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <Do_Sram_Pattern_Test+0x194>)
 80010fa:	61fb      	str	r3, [r7, #28]
	current_hcrc = hcrc_used;
 80010fc:	4a5f      	ldr	r2, [pc, #380]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]

	crc_length = crc_length / 4; // range is defined in bytes, but length is define in 32bit words
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
	crc_length = crc_length /4; //algorithm tests 4 words at a time
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	61bb      	str	r3, [r7, #24]

	/* Reset CRC Calculation Unit (hcrc->Instance->INIT is
	*  written in hcrc->Instance->DR) */
	__HAL_CRC_DR_RESET(current_hcrc);
 800110e:	4b5b      	ldr	r3, [pc, #364]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	609a      	str	r2, [r3, #8]

	current_hcrc->InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8001122:	4b56      	ldr	r3, [pc, #344]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2203      	movs	r2, #3
 8001128:	621a      	str	r2, [r3, #32]
	/* Change CRC peripheral state */
	current_hcrc->State = HAL_CRC_STATE_BUSY;
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2202      	movs	r2, #2
 8001130:	775a      	strb	r2, [r3, #29]


	//init crc peripheral input register
	current_hcrc->Instance->INIT = CRC_TEST_SEED;
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800113c:	611a      	str	r2, [r3, #16]

	volatile uint32_t tempStorage[4]; //volatile needed to ensure write are not optimised away
	for(mem_addr = 0; mem_addr < crc_length; mem_addr++) {
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	e076      	b.n	8001232 <Do_Sram_Pattern_Test+0x14e>
		//loop through SRAM memory and fill it with test pattern
		//take a snapshot so as not to destroy data
		tempStorage[0] = *(memPtr+0);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60bb      	str	r3, [r7, #8]
		tempStorage[1] = *(memPtr+1);
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60fb      	str	r3, [r7, #12]
		tempStorage[2] = *(memPtr+2);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
		tempStorage[3] = *(memPtr+3);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	617b      	str	r3, [r7, #20]
		//write test pattern
		*(memPtr+0) = CRC_TEST_SEED;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8001162:	601a      	str	r2, [r3, #0]
		*(memPtr+1) = ~CRC_TEST_SEED;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	3304      	adds	r3, #4
 8001168:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800116c:	601a      	str	r2, [r3, #0]
		*(memPtr+2) = CRC_TEST_SEED;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3308      	adds	r3, #8
 8001172:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8001176:	601a      	str	r2, [r3, #0]
		*(memPtr+3) = ~CRC_TEST_SEED;
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	330c      	adds	r3, #12
 800117c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001180:	601a      	str	r2, [r3, #0]
		//CRC memory to ensure it was written
		current_hcrc->Instance->DR = *(memPtr+0);
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	601a      	str	r2, [r3, #0]
		current_hcrc->Instance->DR = *(memPtr+1);
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	6852      	ldr	r2, [r2, #4]
 8001198:	601a      	str	r2, [r3, #0]
		current_hcrc->Instance->DR = *(memPtr+2);
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	6892      	ldr	r2, [r2, #8]
 80011a4:	601a      	str	r2, [r3, #0]
		current_hcrc->Instance->DR = *(memPtr+3);
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	68d2      	ldr	r2, [r2, #12]
 80011b0:	601a      	str	r2, [r3, #0]
		//write inverted test pattern
		*(memPtr+0) = ~CRC_TEST_SEED;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011b8:	601a      	str	r2, [r3, #0]
		*(memPtr+1) = CRC_TEST_SEED;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80011c2:	601a      	str	r2, [r3, #0]
		*(memPtr+2) = ~CRC_TEST_SEED;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	3308      	adds	r3, #8
 80011c8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011cc:	601a      	str	r2, [r3, #0]
		*(memPtr+3) = CRC_TEST_SEED;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	330c      	adds	r3, #12
 80011d2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80011d6:	601a      	str	r2, [r3, #0]
		//CRC memory to ensure it was written
		current_hcrc->Instance->DR = *(memPtr+0);
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	601a      	str	r2, [r3, #0]
		current_hcrc->Instance->DR = *(memPtr+1);
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	6852      	ldr	r2, [r2, #4]
 80011ee:	601a      	str	r2, [r3, #0]
		current_hcrc->Instance->DR = *(memPtr+2);
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	6892      	ldr	r2, [r2, #8]
 80011fa:	601a      	str	r2, [r3, #0]
		current_hcrc->Instance->DR = *(memPtr+3);
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	68d2      	ldr	r2, [r2, #12]
 8001206:	601a      	str	r2, [r3, #0]
		//restore the snapshot data
		*(memPtr+0) = tempStorage[0];
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	601a      	str	r2, [r3, #0]
		*(memPtr+1) = tempStorage[1];
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]
		*(memPtr+2) = tempStorage[2];
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3308      	adds	r3, #8
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]
		*(memPtr+3) = tempStorage[3];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	330c      	adds	r3, #12
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	601a      	str	r2, [r3, #0]
		memPtr += 4;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3310      	adds	r3, #16
 800122a:	61fb      	str	r3, [r7, #28]
	for(mem_addr = 0; mem_addr < crc_length; mem_addr++) {
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3301      	adds	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	429a      	cmp	r2, r3
 8001238:	d384      	bcc.n	8001144 <Do_Sram_Pattern_Test+0x60>
	}
	/* Change CRC peripheral state */
	current_hcrc->State = HAL_CRC_STATE_READY;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	775a      	strb	r2, [r3, #29]
	//read back the SRAM memory and ensure it weas all written
	crc_result = current_hcrc->Instance->DR;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <Do_Sram_Pattern_Test+0x198>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <Do_Sram_Pattern_Test+0x19c>)
 800124c:	6013      	str	r3, [r2, #0]
	if(crc_result == SRAM_CRC_EXPECTED_RESULT) {
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <Do_Sram_Pattern_Test+0x19c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <Do_Sram_Pattern_Test+0x1a0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d103      	bne.n	8001260 <Do_Sram_Pattern_Test+0x17c>
		test_result = SRAM_TEST_RESULT_PATTERN_PASS;
 8001258:	23aa      	movs	r3, #170	; 0xaa
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125e:	e002      	b.n	8001266 <Do_Sram_Pattern_Test+0x182>
	} else {
		test_result = SRAM_TEST_RESULT_PATTERN_FAIL;
 8001260:	23ff      	movs	r3, #255	; 0xff
 8001262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return test_result;
 8001266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800126a:	4618      	mov	r0, r3
 800126c:	372c      	adds	r7, #44	; 0x2c
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000028 	.word	0x20000028
 800127c:	20000024 	.word	0x20000024
 8001280:	200001a0 	.word	0x200001a0
 8001284:	551b2038 	.word	0x551b2038

08001288 <Set_CRC_Instance>:

void Set_CRC_Instance(CRC_HandleTypeDef *hcrc_used) {
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	current_hcrc = hcrc_used;
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <Set_CRC_Instance+0x1c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000024 	.word	0x20000024

080012a8 <Set_CRC_Start_Address>:

void Set_CRC_Start_Address(uint32_t address) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	crc_start_address = address;
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <Set_CRC_Start_Address+0x1c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000028 	.word	0x20000028

080012c8 <Set_CRC_End_Address>:

void Set_CRC_End_Address(uint32_t address) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	crc_end_address = address;
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <Set_CRC_End_Address+0x1c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000002c 	.word	0x2000002c

080012e8 <Start_CRC_Calculation>:

void Start_CRC_Calculation (void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	// use the HAL to perform a CRC over the provided address ranges
	uint32_t crc_length   = crc_end_address - crc_start_address;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <Start_CRC_Calculation+0x44>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <Start_CRC_Calculation+0x48>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	607b      	str	r3, [r7, #4]
	crc_length = crc_length / 4; // range is defined in bytes, but length is define in 32bit words
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	607b      	str	r3, [r7, #4]
	//init crc peripheral input register
	current_hcrc->Instance->INIT = CRC_TEST_SEED;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <Start_CRC_Calculation+0x4c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800130a:	611a      	str	r2, [r3, #16]
	crc_result = HAL_CRC_Calculate(current_hcrc, (uint32_t*)crc_start_address, crc_length);
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <Start_CRC_Calculation+0x4c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <Start_CRC_Calculation+0x48>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 ff53 	bl	80021c4 <HAL_CRC_Calculate>
 800131e:	4603      	mov	r3, r0
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <Start_CRC_Calculation+0x50>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000002c 	.word	0x2000002c
 8001330:	20000028 	.word	0x20000028
 8001334:	20000024 	.word	0x20000024
 8001338:	200001a0 	.word	0x200001a0

0800133c <Report_CRC_Progress>:

HAL_CRC_StateTypeDef Report_CRC_Progress (void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	// use the HAL to perform a CRC over the provided address ranges
	crc_state = HAL_CRC_GetState(current_hcrc);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <Report_CRC_Progress+0x20>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 ff89 	bl	800225c <HAL_CRC_GetState>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <Report_CRC_Progress+0x24>)
 8001350:	701a      	strb	r2, [r3, #0]
	return(crc_state);
 8001352:	4b03      	ldr	r3, [pc, #12]	; (8001360 <Report_CRC_Progress+0x24>)
 8001354:	781b      	ldrb	r3, [r3, #0]
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000024 	.word	0x20000024
 8001360:	200001a4 	.word	0x200001a4

08001364 <Report_CRC_Result_Value>:

uint32_t Report_CRC_Result_Value (void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	// use the HAL to perform a CRC over the provided address ranges
	return(crc_result);
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <Report_CRC_Result_Value+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001a0 	.word	0x200001a0

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_CAN_MspInit+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d128      	bne.n	8001438 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_CAN_MspInit+0x80>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_CAN_MspInit+0x80>)
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f0:	6593      	str	r3, [r2, #88]	; 0x58
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_CAN_MspInit+0x80>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_CAN_MspInit+0x80>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_CAN_MspInit+0x80>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_CAN_MspInit+0x80>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001428:	2309      	movs	r3, #9
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_CAN_MspInit+0x84>)
 8001434:	f001 faee 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40006400 	.word	0x40006400
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_CRC_MspInit+0x38>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d10b      	bne.n	8001476 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_CRC_MspInit+0x3c>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_CRC_MspInit+0x3c>)
 8001464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001468:	6493      	str	r3, [r2, #72]	; 0x48
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_CRC_MspInit+0x3c>)
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023000 	.word	0x40023000
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0x38>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10b      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6593      	str	r3, [r2, #88]	; 0x58
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40001000 	.word	0x40001000
 80014c8:	40021000 	.word	0x40021000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f892 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001548:	f7ff ffea 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f002 fbb9 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001576:	f7ff faed 	bl	8000b54 <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001588:	08003d90 	.word	0x08003d90
  ldr r2, =_sbss
 800158c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001590:	200001ac 	.word	0x200001ac

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>

08001596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 fd77 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 f80e 	bl	80015c8 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	e001      	b.n	80015bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b8:	f7ff fee0 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_InitTick+0x6c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_InitTick+0x70>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fd75 	bl	80020e2 <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d809      	bhi.n	8001618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 fd4d 	bl	80020aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_InitTick+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e007      	b.n	8001628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e004      	b.n	8001628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e001      	b.n	8001628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000038 	.word	0x20000038
 8001638:	20000030 	.word	0x20000030
 800163c:	20000034 	.word	0x20000034

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000038 	.word	0x20000038
 8001664:	200001a8 	.word	0x200001a8

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200001a8 	.word	0x200001a8

08001680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0ed      	b.n	800186e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fe90 	bl	80013c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff ffd8 	bl	8001668 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ba:	e012      	b.n	80016e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016bc:	f7ff ffd4 	bl	8001668 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d90b      	bls.n	80016e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0c5      	b.n	800186e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0e5      	beq.n	80016bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0202 	bic.w	r2, r2, #2
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001700:	f7ff ffb2 	bl	8001668 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001706:	e012      	b.n	800172e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001708:	f7ff ffae 	bl	8001668 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d90b      	bls.n	800172e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e09f      	b.n	800186e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e5      	bne.n	8001708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e007      	b.n	8001766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e5b      	ldrb	r3, [r3, #25]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e007      	b.n	8001790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800178e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7e9b      	ldrb	r3, [r3, #26]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e007      	b.n	80017ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0220 	bic.w	r2, r2, #32
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7edb      	ldrb	r3, [r3, #27]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0210 	bic.w	r2, r2, #16
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0210 	orr.w	r2, r2, #16
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f1b      	ldrb	r3, [r3, #28]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0208 	orr.w	r2, r2, #8
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e007      	b.n	800180e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7f5b      	ldrb	r3, [r3, #29]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e007      	b.n	8001838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	ea42 0103 	orr.w	r1, r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001876:	b480      	push	{r7}
 8001878:	b087      	sub	sp, #28
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d003      	beq.n	800189c <HAL_CAN_ConfigFilter+0x26>
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	2b02      	cmp	r3, #2
 8001898:	f040 80aa 	bne.w	80019f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d123      	bne.n	800191e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3248      	adds	r2, #72	; 0x48
 80018fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001912:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	3348      	adds	r3, #72	; 0x48
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d122      	bne.n	800196c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	431a      	orrs	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001946:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3248      	adds	r2, #72	; 0x48
 800194c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001960:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	3348      	adds	r3, #72	; 0x48
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001986:	e007      	b.n	8001998 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019b2:	e007      	b.n	80019c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	431a      	orrs	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e2:	f023 0201 	bic.w	r2, r3, #1
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e006      	b.n	80019fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d12e      	bne.n	8001a7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a36:	f7ff fe17 	bl	8001668 <HAL_GetTick>
 8001a3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a3c:	e012      	b.n	8001a64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a3e:	f7ff fe13 	bl	8001668 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d90b      	bls.n	8001a64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2205      	movs	r2, #5
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e012      	b.n	8001a8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e5      	bne.n	8001a3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e006      	b.n	8001a8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b089      	sub	sp, #36	; 0x24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d003      	beq.n	8001abe <HAL_CAN_AddTxMessage+0x2c>
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 80ad 	bne.w	8001c18 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8095 	beq.w	8001c08 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	0e1b      	lsrs	r3, r3, #24
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	409a      	lsls	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	6809      	ldr	r1, [r1, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	440b      	add	r3, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e00f      	b.n	8001b36 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b26:	68f9      	ldr	r1, [r7, #12]
 8001b28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	440b      	add	r3, r1
 8001b34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3318      	adds	r3, #24
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	3304      	adds	r3, #4
 8001b48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	7d1b      	ldrb	r3, [r3, #20]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d111      	bne.n	8001b76 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3318      	adds	r3, #24
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6811      	ldr	r1, [r2, #0]
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	440b      	add	r3, r1
 8001b72:	3304      	adds	r3, #4
 8001b74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3307      	adds	r3, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	061a      	lsls	r2, r3, #24
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3306      	adds	r3, #6
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	041b      	lsls	r3, r3, #16
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3305      	adds	r3, #5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4313      	orrs	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	3204      	adds	r2, #4
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	4610      	mov	r0, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	6811      	ldr	r1, [r2, #0]
 8001b9e:	ea43 0200 	orr.w	r2, r3, r0
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001bac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	061a      	lsls	r2, r3, #24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	4610      	mov	r0, r2
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	ea43 0200 	orr.w	r2, r3, r0
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	440b      	add	r3, r1
 8001bde:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001be2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3318      	adds	r3, #24
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	6811      	ldr	r1, [r2, #0]
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	440b      	add	r3, r1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e00e      	b.n	8001c26 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e006      	b.n	8001c26 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c44:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d002      	beq.n	8001c52 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d11d      	bne.n	8001c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d003      	beq.n	8001cc0 <HAL_CAN_GetRxMessage+0x24>
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	f040 8103 	bne.w	8001ec6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0f7      	b.n	8001ed4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d107      	bne.n	8001d02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0e8      	b.n	8001ed4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	331b      	adds	r3, #27
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0204 	and.w	r2, r3, #4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0d5b      	lsrs	r3, r3, #21
 8001d30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e00b      	b.n	8001d52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	331b      	adds	r3, #27
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	331b      	adds	r3, #27
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0202 	and.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	331b      	adds	r3, #27
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2208      	movs	r2, #8
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	e00b      	b.n	8001da0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	331b      	adds	r3, #27
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	331b      	adds	r3, #27
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	331b      	adds	r3, #27
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0a1a      	lsrs	r2, r3, #8
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0c1a      	lsrs	r2, r3, #16
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	3302      	adds	r3, #2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0e1a      	lsrs	r2, r3, #24
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	3303      	adds	r3, #3
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3304      	adds	r3, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0a1a      	lsrs	r2, r3, #8
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3305      	adds	r3, #5
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0c1a      	lsrs	r2, r3, #16
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	3306      	adds	r3, #6
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e1a      	lsrs	r2, r3, #24
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3307      	adds	r3, #7
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d108      	bne.n	8001eb2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	e007      	b.n	8001ec2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e006      	b.n	8001ed4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d002      	beq.n	8001f02 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d10f      	bne.n	8001f22 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e005      	b.n	8001f22 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff47 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff5c 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffb0 	bl	8002050 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e054      	b.n	80021b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7f5b      	ldrb	r3, [r3, #29]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff f994 	bl	800144c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	791b      	ldrb	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_CRC_Init+0xc4>)
 8002138:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0218 	bic.w	r2, r2, #24
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	e00c      	b.n	8002166 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6899      	ldr	r1, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	461a      	mov	r2, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f956 	bl	8002408 <HAL_CRCEx_Polynomial_Set>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e028      	b.n	80021b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	795b      	ldrb	r3, [r3, #5]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 32ff 	mov.w	r2, #4294967295
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	e004      	b.n	8002184 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6912      	ldr	r2, [r2, #16]
 8002182:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	04c11db7 	.word	0x04c11db7

080021c4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2202      	movs	r2, #2
 80021d8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d006      	beq.n	8002200 <HAL_CRC_Calculate+0x3c>
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d829      	bhi.n	800224a <HAL_CRC_Calculate+0x86>
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d019      	beq.n	800222e <HAL_CRC_Calculate+0x6a>
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d01e      	beq.n	800223c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80021fe:	e024      	b.n	800224a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e00a      	b.n	800221c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	441a      	add	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3f0      	bcc.n	8002206 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	e00e      	b.n	800224c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f81f 	bl	8002276 <CRC_Handle_8>
 8002238:	6138      	str	r0, [r7, #16]
      break;
 800223a:	e007      	b.n	800224c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f8a6 	bl	8002392 <CRC_Handle_16>
 8002246:	6138      	str	r0, [r7, #16]
      break;
 8002248:	e000      	b.n	800224c <HAL_CRC_Calculate+0x88>
      break;
 800224a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002252:	693b      	ldr	r3, [r7, #16]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(const CRC_HandleTypeDef *hcrc)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f5b      	ldrb	r3, [r3, #29]
 8002268:	b2db      	uxtb	r3, r3
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002276:	b480      	push	{r7}
 8002278:	b089      	sub	sp, #36	; 0x24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e023      	b.n	80022d0 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3301      	adds	r3, #1
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	440b      	add	r3, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022a2:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	440b      	add	r3, r1
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80022b2:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3303      	adds	r3, #3
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	440b      	add	r3, r1
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80022c6:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3d6      	bcc.n	8002288 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d04d      	beq.n	8002380 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d116      	bne.n	8002336 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b21a      	sxth	r2, r3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3301      	adds	r3, #1
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	440b      	add	r3, r1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b21b      	sxth	r3, r3
 8002328:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	8b7a      	ldrh	r2, [r7, #26]
 8002334:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d11f      	bne.n	8002380 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b21a      	sxth	r2, r3
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3301      	adds	r3, #1
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	440b      	add	r3, r1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	8b7a      	ldrh	r2, [r7, #26]
 800236c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4413      	add	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e013      	b.n	80023cc <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	440b      	add	r3, r1
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3e6      	bcc.n	80023a4 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002418:	231f      	movs	r3, #31
 800241a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
 800242a:	e063      	b.n	80024f4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800242c:	bf00      	nop
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1e5a      	subs	r2, r3, #1
 8002432:	613a      	str	r2, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <HAL_CRCEx_Polynomial_Set+0x44>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b18      	cmp	r3, #24
 8002450:	d846      	bhi.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	080024e7 	.word	0x080024e7
 800245c:	080024e1 	.word	0x080024e1
 8002460:	080024e1 	.word	0x080024e1
 8002464:	080024e1 	.word	0x080024e1
 8002468:	080024e1 	.word	0x080024e1
 800246c:	080024e1 	.word	0x080024e1
 8002470:	080024e1 	.word	0x080024e1
 8002474:	080024e1 	.word	0x080024e1
 8002478:	080024d5 	.word	0x080024d5
 800247c:	080024e1 	.word	0x080024e1
 8002480:	080024e1 	.word	0x080024e1
 8002484:	080024e1 	.word	0x080024e1
 8002488:	080024e1 	.word	0x080024e1
 800248c:	080024e1 	.word	0x080024e1
 8002490:	080024e1 	.word	0x080024e1
 8002494:	080024e1 	.word	0x080024e1
 8002498:	080024c9 	.word	0x080024c9
 800249c:	080024e1 	.word	0x080024e1
 80024a0:	080024e1 	.word	0x080024e1
 80024a4:	080024e1 	.word	0x080024e1
 80024a8:	080024e1 	.word	0x080024e1
 80024ac:	080024e1 	.word	0x080024e1
 80024b0:	080024e1 	.word	0x080024e1
 80024b4:	080024e1 	.word	0x080024e1
 80024b8:	080024bd 	.word	0x080024bd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d913      	bls.n	80024ea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024c6:	e010      	b.n	80024ea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b07      	cmp	r3, #7
 80024cc:	d90f      	bls.n	80024ee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024d2:	e00c      	b.n	80024ee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	d90b      	bls.n	80024f2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024de:	e008      	b.n	80024f2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
        break;
 80024e4:	e006      	b.n	80024f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024e6:	bf00      	nop
 80024e8:	e004      	b.n	80024f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024ea:	bf00      	nop
 80024ec:	e002      	b.n	80024f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024f2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 0118 	bic.w	r1, r3, #24
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002516:	7dfb      	ldrb	r3, [r7, #23]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_FLASH_Program+0xd0>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_FLASH_Program+0x1e>
 800253e:	2302      	movs	r3, #2
 8002540:	e053      	b.n	80025ea <HAL_FLASH_Program+0xc6>
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_FLASH_Program+0xd0>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002548:	f24c 3050 	movw	r0, #50000	; 0xc350
 800254c:	f000 f888 	bl	8002660 <FLASH_WaitForLastOperation>
 8002550:	4603      	mov	r3, r0
 8002552:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d143      	bne.n	80025e2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_FLASH_Program+0xd0>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_FLASH_Program+0xd4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_FLASH_Program+0xd4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_FLASH_Program+0xd4>)
 8002572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002576:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_FLASH_Program+0xd0>)
 800257a:	2202      	movs	r2, #2
 800257c:	771a      	strb	r2, [r3, #28]
 800257e:	e002      	b.n	8002586 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_FLASH_Program+0xd0>)
 8002582:	2200      	movs	r2, #0
 8002584:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800258c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002590:	68b8      	ldr	r0, [r7, #8]
 8002592:	f000 f8bd 	bl	8002710 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002596:	2301      	movs	r3, #1
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	e010      	b.n	80025be <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d002      	beq.n	80025a8 <HAL_FLASH_Program+0x84>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d10a      	bne.n	80025be <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	68b8      	ldr	r0, [r7, #8]
 80025ae:	f000 f8d5 	bl	800275c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d102      	bne.n	80025be <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80025b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025bc:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c2:	f000 f84d 	bl	8002660 <FLASH_WaitForLastOperation>
 80025c6:	4603      	mov	r3, r0
 80025c8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_FLASH_Program+0xd4>)
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <HAL_FLASH_Program+0xd4>)
 80025da:	4013      	ands	r3, r2
 80025dc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80025de:	f000 f9cf 	bl	8002980 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_FLASH_Program+0xd0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]

  return status;
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000003c 	.word	0x2000003c
 80025f8:	40022000 	.word	0x40022000

080025fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_FLASH_Unlock+0x38>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da0b      	bge.n	8002626 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_FLASH_Unlock+0x38>)
 8002610:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_FLASH_Unlock+0x3c>)
 8002612:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_FLASH_Unlock+0x38>)
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_FLASH_Unlock+0x40>)
 8002618:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_FLASH_Unlock+0x38>)
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	da01      	bge.n	8002626 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002626:	79fb      	ldrb	r3, [r7, #7]
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40022000 	.word	0x40022000
 8002638:	45670123 	.word	0x45670123
 800263c:	cdef89ab 	.word	0xcdef89ab

08002640 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_FLASH_Lock+0x1c>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_FLASH_Lock+0x1c>)
 800264a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800264e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40022000 	.word	0x40022000

08002660 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002668:	f7fe fffe 	bl	8001668 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800266e:	e00d      	b.n	800268c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d009      	beq.n	800268c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002678:	f7fe fff6 	bl	8001668 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	d801      	bhi.n	800268c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e036      	b.n	80026fa <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1eb      	bne.n	8002670 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <FLASH_WaitForLastOperation+0xa8>)
 800269e:	4013      	ands	r3, r2
 80026a0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01e      	beq.n	80026e6 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <FLASH_WaitForLastOperation+0xac>)
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <FLASH_WaitForLastOperation+0xac>)
 80026b2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <FLASH_WaitForLastOperation+0x6e>
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80026c8:	490e      	ldr	r1, [pc, #56]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	618b      	str	r3, [r1, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <FLASH_WaitForLastOperation+0x82>
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026e0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e009      	b.n	80026fa <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <FLASH_WaitForLastOperation+0xa4>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	0002c3fa 	.word	0x0002c3fa
 800270c:	2000003c 	.word	0x2000003c

08002710 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <FLASH_Program_DoubleWord+0x48>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <FLASH_Program_DoubleWord+0x48>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800272e:	f3bf 8f6f 	isb	sy
}
 8002732:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002734:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	000a      	movs	r2, r1
 8002742:	2300      	movs	r3, #0
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	3104      	adds	r1, #4
 8002748:	4613      	mov	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40022000 	.word	0x40022000

0800275c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002766:	2340      	movs	r3, #64	; 0x40
 8002768:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <FLASH_Program_Fast+0x68>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <FLASH_Program_Fast+0x68>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277e:	f3ef 8310 	mrs	r3, PRIMASK
 8002782:	60fb      	str	r3, [r7, #12]
  return(result);
 8002784:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	3304      	adds	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3304      	adds	r3, #4
 800279e:	617b      	str	r3, [r7, #20]
    row_index--;
 80027a0:	7ffb      	ldrb	r3, [r7, #31]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ef      	bne.n	800278c <FLASH_Program_Fast+0x30>
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80027b8:	bf00      	nop
 80027ba:	3724      	adds	r7, #36	; 0x24
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40022000 	.word	0x40022000

080027c8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027d2:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_FLASHEx_Erase+0x16>
 80027da:	2302      	movs	r3, #2
 80027dc:	e085      	b.n	80028ea <HAL_FLASHEx_Erase+0x122>
 80027de:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027e8:	f7ff ff3a 	bl	8002660 <FLASH_WaitForLastOperation>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d175      	bne.n	80028e2 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80027fc:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002808:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002814:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 800281a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800281e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 8002822:	2203      	movs	r2, #3
 8002824:	771a      	strb	r2, [r3, #28]
 8002826:	e016      	b.n	8002856 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 800282a:	2201      	movs	r2, #1
 800282c:	771a      	strb	r2, [r3, #28]
 800282e:	e012      	b.n	8002856 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002830:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 8002842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002846:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 800284a:	2202      	movs	r2, #2
 800284c:	771a      	strb	r2, [r3, #28]
 800284e:	e002      	b.n	8002856 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d111      	bne.n	8002882 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f84a 	bl	80028fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002868:	f24c 3050 	movw	r0, #50000	; 0xc350
 800286c:	f7ff fef8 	bl	8002660 <FLASH_WaitForLastOperation>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6153      	str	r3, [r2, #20]
 8002880:	e02d      	b.n	80028de <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	e01d      	b.n	80028ce <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4619      	mov	r1, r3
 8002898:	68b8      	ldr	r0, [r7, #8]
 800289a:	f000 f84d 	bl	8002938 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800289e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a2:	f7ff fedd 	bl	8002660 <FLASH_WaitForLastOperation>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_FLASHEx_Erase+0x130>)
 80028b0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80028b4:	f023 0302 	bic.w	r3, r3, #2
 80028b8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	601a      	str	r2, [r3, #0]
          break;
 80028c6:	e00a      	b.n	80028de <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d3d9      	bcc.n	8002892 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80028de:	f000 f84f 	bl	8002980 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_FLASHEx_Erase+0x12c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

  return status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000003c 	.word	0x2000003c
 80028f8:	40022000 	.word	0x40022000

080028fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <FLASH_MassErase+0x38>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <FLASH_MassErase+0x38>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <FLASH_MassErase+0x38>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <FLASH_MassErase+0x38>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6153      	str	r3, [r2, #20]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000

08002938 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <FLASH_PageErase+0x44>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <FLASH_PageErase+0x44>)
 8002954:	4313      	orrs	r3, r2
 8002956:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <FLASH_PageErase+0x44>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <FLASH_PageErase+0x44>)
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <FLASH_PageErase+0x44>)
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <FLASH_PageErase+0x44>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	6153      	str	r3, [r2, #20]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40022000 	.word	0x40022000

08002980 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <FLASH_FlushCaches+0x8c>)
 8002988:	7f1b      	ldrb	r3, [r3, #28]
 800298a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d002      	beq.n	8002998 <FLASH_FlushCaches+0x18>
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d117      	bne.n	80029c8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <FLASH_FlushCaches+0x90>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <FLASH_FlushCaches+0x90>)
 800299e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d002      	beq.n	80029d4 <FLASH_FlushCaches+0x54>
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d111      	bne.n	80029f8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <FLASH_FlushCaches+0x90>)
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <FLASH_FlushCaches+0x8c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	2000003c 	.word	0x2000003c
 8002a10:	40022000 	.word	0x40022000

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a22:	e154      	b.n	8002cce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8146 	beq.w	8002cc8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x40>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d130      	bne.n	8002ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 0201 	and.w	r2, r3, #1
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d017      	beq.n	8002af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d123      	bne.n	8002b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	6939      	ldr	r1, [r7, #16]
 8002b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80a0 	beq.w	8002cc8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b88:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_GPIO_Init+0x2d8>)
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	4a57      	ldr	r2, [pc, #348]	; (8002cec <HAL_GPIO_Init+0x2d8>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6613      	str	r3, [r2, #96]	; 0x60
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_GPIO_Init+0x2d8>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba0:	4a53      	ldr	r2, [pc, #332]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bca:	d019      	beq.n	8002c00 <HAL_GPIO_Init+0x1ec>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_GPIO_Init+0x2e0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_GPIO_Init+0x1e8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2e4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00d      	beq.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <HAL_GPIO_Init+0x1e0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a46      	ldr	r2, [pc, #280]	; (8002d00 <HAL_GPIO_Init+0x2ec>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_GPIO_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e008      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e004      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002c00:	2300      	movs	r3, #0
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4093      	lsls	r3, r2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c12:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c20:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c44:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c6e:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c98:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aea3 	bne.w	8002a24 <HAL_GPIO_Init+0x10>
  }
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	48000c00 	.word	0x48000c00
 8002d00:	48001000 	.word	0x48001000
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d24:	e002      	b.n	8002d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d62:	d130      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d038      	beq.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2232      	movs	r2, #50	; 0x32
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	3301      	adds	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d98:	e002      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d102      	bne.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f2      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc0:	d110      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e00f      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d007      	beq.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ddc:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40007000 	.word	0x40007000
 8002df8:	20000030 	.word	0x20000030
 8002dfc:	431bde83 	.word	0x431bde83

08002e00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f000 bc02 	b.w	8003618 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e1e:	4b94      	ldr	r3, [pc, #592]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80e4 	beq.w	8002ffe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4c>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	f040 808b 	bne.w	8002f5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 8087 	bne.w	8002f5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4c:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x64>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e3d9      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_RCC_OscConfig+0x7e>
 8002e74:	4b7e      	ldr	r3, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	e005      	b.n	8002e8a <HAL_RCC_OscConfig+0x8a>
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d223      	bcs.n	8002ed6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fd52 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e3ba      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a72      	ldr	r2, [pc, #456]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	496d      	ldr	r1, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec0:	4b6b      	ldr	r3, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	4968      	ldr	r1, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
 8002ed4:	e025      	b.n	8002f22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4960      	ldr	r1, [pc, #384]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	495b      	ldr	r1, [pc, #364]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd12 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e37a      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f22:	f000 fc81 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b51      	ldr	r3, [pc, #324]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	4950      	ldr	r1, [pc, #320]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fb3e 	bl	80015c8 <HAL_InitTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d052      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	e35e      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d032      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a42      	ldr	r2, [pc, #264]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fb7b 	bl	8001668 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f76:	f7fe fb77 	bl	8001668 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e347      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a35      	ldr	r2, [pc, #212]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4930      	ldr	r1, [pc, #192]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	492b      	ldr	r1, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
 8002fc6:	e01a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fb48 	bl	8001668 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fb44 	bl	8001668 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e314      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1dc>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d073      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x21c>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d10e      	bne.n	8003034 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d10b      	bne.n	8003034 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d063      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d15f      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e2f1      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x24c>
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e025      	b.n	8003098 <HAL_RCC_OscConfig+0x298>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003054:	d114      	bne.n	8003080 <HAL_RCC_OscConfig+0x280>
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a05      	ldr	r2, [pc, #20]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a02      	ldr	r2, [pc, #8]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e013      	b.n	8003098 <HAL_RCC_OscConfig+0x298>
 8003070:	40021000 	.word	0x40021000
 8003074:	08003d48 	.word	0x08003d48
 8003078:	20000030 	.word	0x20000030
 800307c:	20000034 	.word	0x20000034
 8003080:	4ba0      	ldr	r3, [pc, #640]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a9f      	ldr	r2, [pc, #636]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a9c      	ldr	r2, [pc, #624]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fae2 	bl	8001668 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fade 	bl	8001668 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e2ae      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ba:	4b92      	ldr	r3, [pc, #584]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2a8>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe face 	bl	8001668 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe faca 	bl	8001668 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e29a      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2d0>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d060      	beq.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d005      	beq.n	8003110 <HAL_RCC_OscConfig+0x310>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d119      	bne.n	800313e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d116      	bne.n	800313e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003110:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x328>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e277      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	4973      	ldr	r1, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	e040      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d023      	beq.n	800318e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003146:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6e      	ldr	r2, [pc, #440]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe fa89 	bl	8001668 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7fe fa85 	bl	8001668 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e255      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800316c:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	495f      	ldr	r1, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
 800318c:	e018      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5c      	ldr	r2, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fe fa65 	bl	8001668 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fa61 	bl	8001668 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e231      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03c      	beq.n	8003246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01c      	beq.n	800320e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fa40 	bl	8001668 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe fa3c 	bl	8001668 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e20c      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ef      	beq.n	80031ec <HAL_RCC_OscConfig+0x3ec>
 800320c:	e01b      	b.n	8003246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003214:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fa23 	bl	8001668 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fa1f 	bl	8001668 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1ef      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ef      	bne.n	8003226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80a6 	beq.w	80033a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003258:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d118      	bne.n	80032be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003298:	f7fe f9e6 	bl	8001668 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fe f9e2 	bl	8001668 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1b2      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d8>
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d6:	e029      	b.n	800332c <HAL_RCC_OscConfig+0x52c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d115      	bne.n	800330c <HAL_RCC_OscConfig+0x50c>
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	4a03      	ldr	r2, [pc, #12]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x52c>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	40007000 	.word	0x40007000
 800330c:	4b9a      	ldr	r3, [pc, #616]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a99      	ldr	r2, [pc, #612]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331c:	4b96      	ldr	r3, [pc, #600]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	4a95      	ldr	r2, [pc, #596]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d016      	beq.n	8003362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe f998 	bl	8001668 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe f994 	bl	8001668 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e162      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ed      	beq.n	800333c <HAL_RCC_OscConfig+0x53c>
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fe f981 	bl	8001668 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fe f97d 	bl	8001668 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e14b      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ed      	bne.n	800336a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b78      	ldr	r3, [pc, #480]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	4a77      	ldr	r2, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03c      	beq.n	8003426 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b4:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe f950 	bl	8001668 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033cc:	f7fe f94c 	bl	8001668 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e11c      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <HAL_RCC_OscConfig+0x5cc>
 80033ec:	e01b      	b.n	8003426 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ee:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f4:	4a60      	ldr	r2, [pc, #384]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe f933 	bl	8001668 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003406:	f7fe f92f 	bl	8001668 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0ff      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800341a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ef      	bne.n	8003406 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80f3 	beq.w	8003616 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b02      	cmp	r3, #2
 8003436:	f040 80c9 	bne.w	80035cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800343a:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0203 	and.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d12c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	3b01      	subs	r3, #1
 800345a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d123      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d11b      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d113      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d109      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d06b      	beq.n	8003580 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d062      	beq.n	8003574 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0ac      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ca:	f7fe f8cd 	bl	8001668 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fe f8c9 	bl	8001668 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e099      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4b21      	ldr	r3, [pc, #132]	; (800357c <HAL_RCC_OscConfig+0x77c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003500:	3a01      	subs	r2, #1
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	4311      	orrs	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350a:	0212      	lsls	r2, r2, #8
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003512:	0852      	lsrs	r2, r2, #1
 8003514:	3a01      	subs	r2, #1
 8003516:	0552      	lsls	r2, r2, #21
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0652      	lsls	r2, r2, #25
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352a:	06d2      	lsls	r2, r2, #27
 800352c:	430a      	orrs	r2, r1
 800352e:	4912      	ldr	r1, [pc, #72]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800354c:	f7fe f88c 	bl	8001668 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe f888 	bl	8001668 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e058      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003572:	e050      	b.n	8003616 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04f      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
 8003578:	40021000 	.word	0x40021000
 800357c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d144      	bne.n	8003616 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 8003592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003598:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a20      	ldr	r2, [pc, #128]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a4:	f7fe f860 	bl	8001668 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe f85c 	bl	8001668 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e02c      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x7ac>
 80035ca:	e024      	b.n	8003616 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d01f      	beq.n	8003612 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe f843 	bl	8001668 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe f83f 	bl	8001668 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e00f      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4905      	ldr	r1, [pc, #20]	; (8003620 <HAL_RCC_OscConfig+0x820>)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x824>)
 800360c:	4013      	ands	r3, r2
 800360e:	60cb      	str	r3, [r1, #12]
 8003610:	e001      	b.n	8003616 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	feeefffc 	.word	0xfeeefffc

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0e7      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b72      	ldr	r3, [pc, #456]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 0207 	bic.w	r2, r3, #7
 8003652:	4970      	ldr	r1, [pc, #448]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0cf      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003684:	429a      	cmp	r2, r3
 8003686:	d908      	bls.n	800369a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4960      	ldr	r1, [pc, #384]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04c      	beq.n	8003740 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	4b5a      	ldr	r3, [pc, #360]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0a6      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c6:	4b54      	ldr	r3, [pc, #336]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d115      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e09a      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036de:	4b4e      	ldr	r3, [pc, #312]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e08e      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ee:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e086      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4943      	ldr	r1, [pc, #268]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7fd ffaa 	bl	8001668 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd ffa6 	bl	8001668 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e06e      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003758:	429a      	cmp	r2, r3
 800375a:	d208      	bcs.n	800376e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	492b      	ldr	r1, [pc, #172]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d210      	bcs.n	800379e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 0207 	bic.w	r2, r3, #7
 8003784:	4923      	ldr	r1, [pc, #140]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e036      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4918      	ldr	r1, [pc, #96]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4910      	ldr	r1, [pc, #64]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037dc:	f000 f824 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	490b      	ldr	r1, [pc, #44]	; (800381c <HAL_RCC_ClockConfig+0x1f4>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
 80037f8:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1fc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fee1 	bl	80015c8 <HAL_InitTick>
 8003806:	4603      	mov	r3, r0
 8003808:	72fb      	strb	r3, [r7, #11]

  return status;
 800380a:	7afb      	ldrb	r3, [r7, #11]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
 800381c:	08003d48 	.word	0x08003d48
 8003820:	20000030 	.word	0x20000030
 8003824:	20000034 	.word	0x20000034

08003828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003836:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x34>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d121      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11e      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d107      	bne.n	8003878 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003868:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 800386a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e005      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003878:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e004      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038ac:	4b22      	ldr	r3, [pc, #136]	; (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d134      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0xa6>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d003      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0xac>
 80038cc:	e005      	b.n	80038da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038d0:	617b      	str	r3, [r7, #20]
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038d6:	617b      	str	r3, [r7, #20]
      break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	617b      	str	r3, [r7, #20]
      break;
 80038de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	3301      	adds	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	fb03 f202 	mul.w	r2, r3, r2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	0e5b      	lsrs	r3, r3, #25
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	3301      	adds	r3, #1
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003920:	69bb      	ldr	r3, [r7, #24]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	08003d58 	.word	0x08003d58
 8003938:	00f42400 	.word	0x00f42400

0800393c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7ff f9f0 	bl	8002d38 <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
 800395a:	e014      	b.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7ff f9e0 	bl	8002d38 <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d10b      	bne.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d919      	bls.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2ba0      	cmp	r3, #160	; 0xa0
 8003998:	d902      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800399a:	2302      	movs	r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e013      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a0:	2301      	movs	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e010      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d902      	bls.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039ac:	2303      	movs	r3, #3
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e00a      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d102      	bne.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b8:	2302      	movs	r3, #2
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e004      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d101      	bne.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c4:	2301      	movs	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 0207 	bic.w	r2, r3, #7
 80039d0:	4909      	ldr	r1, [pc, #36]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e049      	b.n	8003aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fd32 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 f882 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d001      	beq.n	8003ac4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e033      	b.n	8003b2c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_TIM_Base_Start+0x8c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_TIM_Base_Start+0x3e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d004      	beq.n	8003aea <HAL_TIM_Base_Start+0x3e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <HAL_TIM_Base_Start+0x90>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d115      	bne.n	8003b16 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_TIM_Base_Start+0x94>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d015      	beq.n	8003b28 <HAL_TIM_Base_Start+0x7c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d011      	beq.n	8003b28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b14:	e008      	b.n	8003b28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e000      	b.n	8003b2a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	00010007 	.word	0x00010007

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <TIM_Base_SetConfig+0xbc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_Base_SetConfig+0x20>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d108      	bne.n	8003b76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_Base_SetConfig+0xbc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_Base_SetConfig+0x52>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d007      	beq.n	8003b96 <TIM_Base_SetConfig+0x52>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <TIM_Base_SetConfig+0xc0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_Base_SetConfig+0x52>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <TIM_Base_SetConfig+0xc4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <TIM_Base_SetConfig+0xbc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_Base_SetConfig+0xa0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <TIM_Base_SetConfig+0xc0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_Base_SetConfig+0xa0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <TIM_Base_SetConfig+0xc4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e04f      	b.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d009      	beq.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d004      	beq.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10c      	bne.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40014000 	.word	0x40014000

08003cd8 <memset>:
 8003cd8:	4402      	add	r2, r0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d100      	bne.n	8003ce2 <memset+0xa>
 8003ce0:	4770      	bx	lr
 8003ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce6:	e7f9      	b.n	8003cdc <memset+0x4>

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4d0d      	ldr	r5, [pc, #52]	; (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4d0b      	ldr	r5, [pc, #44]	; (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	; (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f000 f818 	bl	8003d30 <_init>
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2600      	movs	r6, #0
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08003d88 	.word	0x08003d88
 8003d24:	08003d88 	.word	0x08003d88
 8003d28:	08003d88 	.word	0x08003d88
 8003d2c:	08003d8c 	.word	0x08003d8c

08003d30 <_init>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr

08003d3c <_fini>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr
